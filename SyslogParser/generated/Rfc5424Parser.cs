//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Stefan.Steiger\Documents\Visual Studio 2017\Projects\SqlParser\SqlParser\grammars\Rfc5424.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SyslogServer.grammars {

//CHECKSTYLE:OFF
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class Rfc5424Parser : Parser {
	public const int
		TAB=1, LF=2, CR=3, SPACE=4, EXCLAMATION=5, QUOTE=6, POUND=7, DOLLAR=8, 
		PERCENT=9, AMPERSAND=10, APOSTROPHE=11, LEFT_PAREN=12, RIGHT_PAREN=13, 
		ASTERISK=14, PLUS=15, COMMA=16, DASH=17, PERIOD=18, SLASH=19, ZERO=20, 
		ONE=21, TWO=22, THREE=23, FOUR=24, FIVE=25, SIX=26, SEVEN=27, EIGHT=28, 
		NINE=29, COLON=30, SEMICOLON=31, LESS_THAN=32, EQUALS=33, GREATER_THAN=34, 
		QUESTION=35, AT=36, CAP_A=37, CAP_B=38, CAP_C=39, CAP_D=40, CAP_E=41, 
		CAP_F=42, CAP_G=43, CAP_H=44, CAP_I=45, CAP_J=46, CAP_K=47, CAP_L=48, 
		CAP_M=49, CAP_N=50, CAP_O=51, CAP_P=52, CAP_Q=53, CAP_R=54, CAP_S=55, 
		CAP_T=56, CAP_U=57, CAP_V=58, CAP_W=59, CAP_X=60, CAP_Y=61, CAP_Z=62, 
		LEFT_BRACE=63, BACKSLASH=64, RIGHT_BRACE=65, CARAT=66, UNDERSCORE=67, 
		ACCENT=68, A=69, B=70, C=71, D=72, E=73, F=74, G=75, H=76, I=77, J=78, 
		K=79, L=80, M=81, N=82, O=83, P=84, Q=85, R=86, S=87, T=88, U=89, V=90, 
		W=91, X=92, Y=93, Z=94, LEFT_CURLY_BRACE=95, PIPE=96, RIGHT_CURLY_BRACE=97, 
		TILDE=98, U_0000=99, U_0001=100, U_0002=101, U_0003=102, U_0004=103, U_0005=104, 
		U_0006=105, U_0007=106, U_0008=107, U_000B=108, U_000C=109, U_000E=110, 
		U_000F=111, U_0010=112, U_0011=113, U_0012=114, U_0013=115, U_0014=116, 
		U_0015=117, U_0016=118, U_0017=119, U_0018=120, U_0019=121, U_001A=122, 
		U_001B=123, U_001C=124, U_001D=125, U_001E=126, U_001F=127, U_007F=128, 
		U_0080=129, U_0081=130, U_0082=131, U_0083=132, U_0084=133, U_0085=134, 
		U_0086=135, U_0087=136, U_0088=137, U_0089=138, U_008A=139, U_008B=140, 
		U_008C=141, U_008D=142, U_008E=143, U_008F=144, U_0090=145, U_0091=146, 
		U_0092=147, U_0093=148, U_0094=149, U_0095=150, U_0096=151, U_0097=152, 
		U_0098=153, U_0099=154, U_009A=155, U_009B=156, U_009C=157, U_009D=158, 
		U_009E=159, U_009F=160, U_00A0=161, U_00A1=162, U_00A2=163, U_00A3=164, 
		U_00A4=165, U_00A5=166, U_00A6=167, U_00A7=168, U_00A8=169, U_00A9=170, 
		U_00AA=171, U_00AB=172, U_00AC=173, U_00AD=174, U_00AE=175, U_00AF=176, 
		U_00B0=177, U_00B1=178, U_00B2=179, U_00B3=180, U_00B4=181, U_00B5=182, 
		U_00B6=183, U_00B7=184, U_00B8=185, U_00B9=186, U_00BA=187, U_00BB=188, 
		U_00BC=189, U_00BD=190, U_00BE=191, U_00BF=192, U_00C0=193, U_00C1=194, 
		U_00C2=195, U_00C3=196, U_00C4=197, U_00C5=198, U_00C6=199, U_00C7=200, 
		U_00C8=201, U_00C9=202, U_00CA=203, U_00CB=204, U_00CC=205, U_00CD=206, 
		U_00CE=207, U_00CF=208, U_00D0=209, U_00D1=210, U_00D2=211, U_00D3=212, 
		U_00D4=213, U_00D5=214, U_00D6=215, U_00D7=216, U_00D8=217, U_00D9=218, 
		U_00DA=219, U_00DB=220, U_00DC=221, U_00DD=222, U_00DE=223, U_00DF=224, 
		U_00E0=225, U_00E1=226, U_00E2=227, U_00E3=228, U_00E4=229, U_00E5=230, 
		U_00E6=231, U_00E7=232, U_00E8=233, U_00E9=234, U_00EA=235, U_00EB=236, 
		U_00EC=237, U_00ED=238, U_00EE=239, U_00EF=240, U_00F0=241, U_00F1=242, 
		U_00F2=243, U_00F3=244, U_00F4=245, U_00F5=246, U_00F6=247, U_00F7=248, 
		U_00F8=249, U_00F9=250, U_00FA=251, U_00FB=252, U_00FC=253, U_00FD=254, 
		U_00FE=255, U_00FF=256;
	public const int
		RULE_syslog_msg = 0, RULE_header = 1, RULE_pri = 2, RULE_prival = 3, RULE_version = 4, 
		RULE_hostname = 5, RULE_app_name = 6, RULE_procid = 7, RULE_msgid = 8, 
		RULE_timestamp = 9, RULE_full_date = 10, RULE_date_fullyear = 11, RULE_date_month = 12, 
		RULE_date_mday = 13, RULE_full_time = 14, RULE_partial_time = 15, RULE_time_hour = 16, 
		RULE_time_minute = 17, RULE_time_second = 18, RULE_time_secfrac = 19, 
		RULE_time_offset = 20, RULE_time_numoffset = 21, RULE_structured_data = 22, 
		RULE_sd_element = 23, RULE_sd_param = 24, RULE_sd_id = 25, RULE_param_name = 26, 
		RULE_param_value = 27, RULE_sd_name = 28, RULE_msg = 29, RULE_msg_any = 30, 
		RULE_msg_utf8 = 31, RULE_bom = 32, RULE_utf_8_string = 33, RULE_octet = 34, 
		RULE_sp = 35, RULE_printusascii = 36, RULE_printusasciinospecials = 37, 
		RULE_nonzero_digit = 38, RULE_digit = 39, RULE_nilvalue = 40;
	public static readonly string[] ruleNames = {
		"syslog_msg", "header", "pri", "prival", "version", "hostname", "app_name", 
		"procid", "msgid", "timestamp", "full_date", "date_fullyear", "date_month", 
		"date_mday", "full_time", "partial_time", "time_hour", "time_minute", 
		"time_second", "time_secfrac", "time_offset", "time_numoffset", "structured_data", 
		"sd_element", "sd_param", "sd_id", "param_name", "param_value", "sd_name", 
		"msg", "msg_any", "msg_utf8", "bom", "utf_8_string", "octet", "sp", "printusascii", 
		"printusasciinospecials", "nonzero_digit", "digit", "nilvalue"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\\u0009'", "'\\u000A'", "'\\u000D'", "' '", "'!'", "'\"'", "'#'", 
		"'$'", "'%'", "'&'", "'''", "'('", "')'", "'*'", "'+'", "','", "'-'", 
		"'.'", "'/'", "'0'", "'1'", "'2'", "'3'", "'4'", "'5'", "'6'", "'7'", 
		"'8'", "'9'", "':'", "';'", "'<'", "'='", "'>'", "'?'", "'@'", "'A'", 
		"'B'", "'C'", "'D'", "'E'", "'F'", "'G'", "'H'", "'I'", "'J'", "'K'", 
		"'L'", "'M'", "'N'", "'O'", "'P'", "'Q'", "'R'", "'S'", "'T'", "'U'", 
		"'V'", "'W'", "'X'", "'Y'", "'Z'", "'['", "'\\'", "']'", "'^'", "'_'", 
		"'`'", "'a'", "'b'", "'c'", "'d'", "'e'", "'f'", "'g'", "'h'", "'i'", 
		"'j'", "'k'", "'l'", "'m'", "'n'", "'o'", "'p'", "'q'", "'r'", "'s'", 
		"'t'", "'u'", "'v'", "'w'", "'x'", "'y'", "'z'", "'{'", "'|'", "'}'", 
		"'~'", "'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", 
		"'\\u0005'", "'\\u0006'", "'\\u0007'", "'\\u0008'", "'\\u000B'", "'\\u000C'", 
		"'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", "'\\u0013'", 
		"'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", "'\\u0019'", 
		"'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", "'\\u001F'", 
		"'\\u007F'", "'\\u0080'", "'\\u0081'", "'\\u0082'", "'\\u0083'", "'\\u0084'", 
		"'\\u0085'", "'\\u0086'", "'\\u0087'", "'\\u0088'", "'\\u0089'", "'\\u008A'", 
		"'\\u008B'", "'\\u008C'", "'\\u008D'", "'\\u008E'", "'\\u008F'", "'\\u0090'", 
		"'\\u0091'", "'\\u0092'", "'\\u0093'", "'\\u0094'", "'\\u0095'", "'\\u0096'", 
		"'\\u0097'", "'\\u0098'", "'\\u0099'", "'\\u009A'", "'\\u009B'", "'\\u009C'", 
		"'\\u009D'", "'\\u009E'", "'\\u009F'", "'\\u00A0'", "'\\u00A1'", "'\\u00A2'", 
		"'\\u00A3'", "'\\u00A4'", "'\\u00A5'", "'\\u00A6'", "'\\u00A7'", "'\\u00A8'", 
		"'\\u00A9'", "'\\u00AA'", "'\\u00AB'", "'\\u00AC'", "'\\u00AD'", "'\\u00AE'", 
		"'\\u00AF'", "'\\u00B0'", "'\\u00B1'", "'\\u00B2'", "'\\u00B3'", "'\\u00B4'", 
		"'\\u00B5'", "'\\u00B6'", "'\\u00B7'", "'\\u00B8'", "'\\u00B9'", "'\\u00BA'", 
		"'\\u00BB'", "'\\u00BC'", "'\\u00BD'", "'\\u00BE'", "'\\u00BF'", "'\\u00C0'", 
		"'\\u00C1'", "'\\u00C2'", "'\\u00C3'", "'\\u00C4'", "'\\u00C5'", "'\\u00C6'", 
		"'\\u00C7'", "'\\u00C8'", "'\\u00C9'", "'\\u00CA'", "'\\u00CB'", "'\\u00CC'", 
		"'\\u00CD'", "'\\u00CE'", "'\\u00CF'", "'\\u00D0'", "'\\u00D1'", "'\\u00D2'", 
		"'\\u00D3'", "'\\u00D4'", "'\\u00D5'", "'\\u00D6'", "'\\u00D7'", "'\\u00D8'", 
		"'\\u00D9'", "'\\u00DA'", "'\\u00DB'", "'\\u00DC'", "'\\u00DD'", "'\\u00DE'", 
		"'\\u00DF'", "'\\u00E0'", "'\\u00E1'", "'\\u00E2'", "'\\u00E3'", "'\\u00E4'", 
		"'\\u00E5'", "'\\u00E6'", "'\\u00E7'", "'\\u00E8'", "'\\u00E9'", "'\\u00EA'", 
		"'\\u00EB'", "'\\u00EC'", "'\\u00ED'", "'\\u00EE'", "'\\u00EF'", "'\\u00F0'", 
		"'\\u00F1'", "'\\u00F2'", "'\\u00F3'", "'\\u00F4'", "'\\u00F5'", "'\\u00F6'", 
		"'\\u00F7'", "'\\u00F8'", "'\\u00F9'", "'\\u00FA'", "'\\u00FB'", "'\\u00FC'", 
		"'\\u00FD'", "'\\u00FE'", "'\\u00FF'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TAB", "LF", "CR", "SPACE", "EXCLAMATION", "QUOTE", "POUND", "DOLLAR", 
		"PERCENT", "AMPERSAND", "APOSTROPHE", "LEFT_PAREN", "RIGHT_PAREN", "ASTERISK", 
		"PLUS", "COMMA", "DASH", "PERIOD", "SLASH", "ZERO", "ONE", "TWO", "THREE", 
		"FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE", "COLON", "SEMICOLON", 
		"LESS_THAN", "EQUALS", "GREATER_THAN", "QUESTION", "AT", "CAP_A", "CAP_B", 
		"CAP_C", "CAP_D", "CAP_E", "CAP_F", "CAP_G", "CAP_H", "CAP_I", "CAP_J", 
		"CAP_K", "CAP_L", "CAP_M", "CAP_N", "CAP_O", "CAP_P", "CAP_Q", "CAP_R", 
		"CAP_S", "CAP_T", "CAP_U", "CAP_V", "CAP_W", "CAP_X", "CAP_Y", "CAP_Z", 
		"LEFT_BRACE", "BACKSLASH", "RIGHT_BRACE", "CARAT", "UNDERSCORE", "ACCENT", 
		"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", 
		"O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "LEFT_CURLY_BRACE", 
		"PIPE", "RIGHT_CURLY_BRACE", "TILDE", "U_0000", "U_0001", "U_0002", "U_0003", 
		"U_0004", "U_0005", "U_0006", "U_0007", "U_0008", "U_000B", "U_000C", 
		"U_000E", "U_000F", "U_0010", "U_0011", "U_0012", "U_0013", "U_0014", 
		"U_0015", "U_0016", "U_0017", "U_0018", "U_0019", "U_001A", "U_001B", 
		"U_001C", "U_001D", "U_001E", "U_001F", "U_007F", "U_0080", "U_0081", 
		"U_0082", "U_0083", "U_0084", "U_0085", "U_0086", "U_0087", "U_0088", 
		"U_0089", "U_008A", "U_008B", "U_008C", "U_008D", "U_008E", "U_008F", 
		"U_0090", "U_0091", "U_0092", "U_0093", "U_0094", "U_0095", "U_0096", 
		"U_0097", "U_0098", "U_0099", "U_009A", "U_009B", "U_009C", "U_009D", 
		"U_009E", "U_009F", "U_00A0", "U_00A1", "U_00A2", "U_00A3", "U_00A4", 
		"U_00A5", "U_00A6", "U_00A7", "U_00A8", "U_00A9", "U_00AA", "U_00AB", 
		"U_00AC", "U_00AD", "U_00AE", "U_00AF", "U_00B0", "U_00B1", "U_00B2", 
		"U_00B3", "U_00B4", "U_00B5", "U_00B6", "U_00B7", "U_00B8", "U_00B9", 
		"U_00BA", "U_00BB", "U_00BC", "U_00BD", "U_00BE", "U_00BF", "U_00C0", 
		"U_00C1", "U_00C2", "U_00C3", "U_00C4", "U_00C5", "U_00C6", "U_00C7", 
		"U_00C8", "U_00C9", "U_00CA", "U_00CB", "U_00CC", "U_00CD", "U_00CE", 
		"U_00CF", "U_00D0", "U_00D1", "U_00D2", "U_00D3", "U_00D4", "U_00D5", 
		"U_00D6", "U_00D7", "U_00D8", "U_00D9", "U_00DA", "U_00DB", "U_00DC", 
		"U_00DD", "U_00DE", "U_00DF", "U_00E0", "U_00E1", "U_00E2", "U_00E3", 
		"U_00E4", "U_00E5", "U_00E6", "U_00E7", "U_00E8", "U_00E9", "U_00EA", 
		"U_00EB", "U_00EC", "U_00ED", "U_00EE", "U_00EF", "U_00F0", "U_00F1", 
		"U_00F2", "U_00F3", "U_00F4", "U_00F5", "U_00F6", "U_00F7", "U_00F8", 
		"U_00F9", "U_00FA", "U_00FB", "U_00FC", "U_00FD", "U_00FE", "U_00FF"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rfc5424.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Rfc5424Parser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class Syslog_msgContext : ParserRuleContext {
		public Syslog_msgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syslog_msg; } }
	 
		public Syslog_msgContext() { }
		public virtual void CopyFrom(Syslog_msgContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SyslogMsgContext : Syslog_msgContext {
		public HeaderContext header() {
			return GetRuleContext<HeaderContext>(0);
		}
		public SpContext sp() {
			return GetRuleContext<SpContext>(0);
		}
		public Structured_dataContext structured_data() {
			return GetRuleContext<Structured_dataContext>(0);
		}
		public MsgContext msg() {
			return GetRuleContext<MsgContext>(0);
		}
		public SyslogMsgContext(Syslog_msgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterSyslogMsg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitSyslogMsg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyslogMsg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Syslog_msgContext syslog_msg() {
		Syslog_msgContext _localctx = new Syslog_msgContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_syslog_msg);
		try {
			_localctx = new SyslogMsgContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; header();
			State = 83; sp();
			State = 84; structured_data();
			State = 86;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 85; msg();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
	 
		public HeaderContext() { }
		public virtual void CopyFrom(HeaderContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SyslogHeaderContext : HeaderContext {
		public PriContext pri() {
			return GetRuleContext<PriContext>(0);
		}
		public VersionContext version() {
			return GetRuleContext<VersionContext>(0);
		}
		public SpContext[] sp() {
			return GetRuleContexts<SpContext>();
		}
		public SpContext sp(int i) {
			return GetRuleContext<SpContext>(i);
		}
		public TimestampContext timestamp() {
			return GetRuleContext<TimestampContext>(0);
		}
		public HostnameContext hostname() {
			return GetRuleContext<HostnameContext>(0);
		}
		public App_nameContext app_name() {
			return GetRuleContext<App_nameContext>(0);
		}
		public ProcidContext procid() {
			return GetRuleContext<ProcidContext>(0);
		}
		public MsgidContext msgid() {
			return GetRuleContext<MsgidContext>(0);
		}
		public SyslogHeaderContext(HeaderContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterSyslogHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitSyslogHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyslogHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_header);
		try {
			_localctx = new SyslogHeaderContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; pri();
			State = 89; version();
			State = 90; sp();
			State = 91; timestamp();
			State = 92; sp();
			State = 93; hostname();
			State = 94; sp();
			State = 95; app_name();
			State = 96; sp();
			State = 97; procid();
			State = 98; sp();
			State = 99; msgid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PriContext : ParserRuleContext {
		public PriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pri; } }
	 
		public PriContext() { }
		public virtual void CopyFrom(PriContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HeaderPriorityContext : PriContext {
		public ITerminalNode LESS_THAN() { return GetToken(Rfc5424Parser.LESS_THAN, 0); }
		public PrivalContext prival() {
			return GetRuleContext<PrivalContext>(0);
		}
		public ITerminalNode GREATER_THAN() { return GetToken(Rfc5424Parser.GREATER_THAN, 0); }
		public HeaderPriorityContext(PriContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterHeaderPriority(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitHeaderPriority(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderPriority(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PriContext pri() {
		PriContext _localctx = new PriContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_pri);
		try {
			_localctx = new HeaderPriorityContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(LESS_THAN);
			State = 102; prival();
			State = 103; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivalContext : ParserRuleContext {
		public PrivalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prival; } }
	 
		public PrivalContext() { }
		public virtual void CopyFrom(PrivalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HeaderPriorityValueContext : PrivalContext {
		public DigitContext[] digit() {
			return GetRuleContexts<DigitContext>();
		}
		public DigitContext digit(int i) {
			return GetRuleContext<DigitContext>(i);
		}
		public HeaderPriorityValueContext(PrivalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterHeaderPriorityValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitHeaderPriorityValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderPriorityValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivalContext prival() {
		PrivalContext _localctx = new PrivalContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_prival);
		int _la;
		try {
			_localctx = new HeaderPriorityValueContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; digit();
			State = 112;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 107;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ZERO) | (1L << ONE) | (1L << TWO) | (1L << THREE) | (1L << FOUR) | (1L << FIVE) | (1L << SIX) | (1L << SEVEN) | (1L << EIGHT) | (1L << NINE))) != 0)) {
					{
					State = 106; digit();
					}
				}

				}
				break;

			case 2:
				{
				{
				State = 109; digit();
				State = 110; digit();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionContext : ParserRuleContext {
		public VersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_version; } }
	 
		public VersionContext() { }
		public virtual void CopyFrom(VersionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HeaderVersionContext : VersionContext {
		public Nonzero_digitContext nonzero_digit() {
			return GetRuleContext<Nonzero_digitContext>(0);
		}
		public DigitContext[] digit() {
			return GetRuleContexts<DigitContext>();
		}
		public DigitContext digit(int i) {
			return GetRuleContext<DigitContext>(i);
		}
		public HeaderVersionContext(VersionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterHeaderVersion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitHeaderVersion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionContext version() {
		VersionContext _localctx = new VersionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_version);
		int _la;
		try {
			_localctx = new HeaderVersionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; nonzero_digit();
			State = 121;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 116;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ZERO) | (1L << ONE) | (1L << TWO) | (1L << THREE) | (1L << FOUR) | (1L << FIVE) | (1L << SIX) | (1L << SEVEN) | (1L << EIGHT) | (1L << NINE))) != 0)) {
					{
					State = 115; digit();
					}
				}

				}
				break;

			case 2:
				{
				{
				State = 118; digit();
				State = 119; digit();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostnameContext : ParserRuleContext {
		public HostnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hostname; } }
	 
		public HostnameContext() { }
		public virtual void CopyFrom(HostnameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HeaderHostNameContext : HostnameContext {
		public PrintusasciiContext[] printusascii() {
			return GetRuleContexts<PrintusasciiContext>();
		}
		public PrintusasciiContext printusascii(int i) {
			return GetRuleContext<PrintusasciiContext>(i);
		}
		public HeaderHostNameContext(HostnameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterHeaderHostName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitHeaderHostName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderHostName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HeaderNilHostNameContext : HostnameContext {
		public NilvalueContext nilvalue() {
			return GetRuleContext<NilvalueContext>(0);
		}
		public HeaderNilHostNameContext(HostnameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterHeaderNilHostName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitHeaderNilHostName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderNilHostName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HostnameContext hostname() {
		HostnameContext _localctx = new HostnameContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_hostname);
		int _la;
		try {
			State = 130;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				_localctx = new HeaderNilHostNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 123; nilvalue();
				}
				break;

			case 2:
				_localctx = new HeaderHostNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 127;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATION) | (1L << QUOTE) | (1L << POUND) | (1L << DOLLAR) | (1L << PERCENT) | (1L << AMPERSAND) | (1L << APOSTROPHE) | (1L << LEFT_PAREN) | (1L << RIGHT_PAREN) | (1L << ASTERISK) | (1L << PLUS) | (1L << COMMA) | (1L << DASH) | (1L << PERIOD) | (1L << SLASH) | (1L << ZERO) | (1L << ONE) | (1L << TWO) | (1L << THREE) | (1L << FOUR) | (1L << FIVE) | (1L << SIX) | (1L << SEVEN) | (1L << EIGHT) | (1L << NINE) | (1L << COLON) | (1L << SEMICOLON) | (1L << LESS_THAN) | (1L << EQUALS) | (1L << GREATER_THAN) | (1L << QUESTION) | (1L << AT) | (1L << CAP_A) | (1L << CAP_B) | (1L << CAP_C) | (1L << CAP_D) | (1L << CAP_E) | (1L << CAP_F) | (1L << CAP_G) | (1L << CAP_H) | (1L << CAP_I) | (1L << CAP_J) | (1L << CAP_K) | (1L << CAP_L) | (1L << CAP_M) | (1L << CAP_N) | (1L << CAP_O) | (1L << CAP_P) | (1L << CAP_Q) | (1L << CAP_R) | (1L << CAP_S) | (1L << CAP_T) | (1L << CAP_U) | (1L << CAP_V) | (1L << CAP_W) | (1L << CAP_X) | (1L << CAP_Y) | (1L << CAP_Z) | (1L << LEFT_BRACE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BACKSLASH - 64)) | (1L << (RIGHT_BRACE - 64)) | (1L << (CARAT - 64)) | (1L << (UNDERSCORE - 64)) | (1L << (ACCENT - 64)) | (1L << (A - 64)) | (1L << (B - 64)) | (1L << (C - 64)) | (1L << (D - 64)) | (1L << (E - 64)) | (1L << (F - 64)) | (1L << (G - 64)) | (1L << (H - 64)) | (1L << (I - 64)) | (1L << (J - 64)) | (1L << (K - 64)) | (1L << (L - 64)) | (1L << (M - 64)) | (1L << (N - 64)) | (1L << (O - 64)) | (1L << (P - 64)) | (1L << (Q - 64)) | (1L << (R - 64)) | (1L << (S - 64)) | (1L << (T - 64)) | (1L << (U - 64)) | (1L << (V - 64)) | (1L << (W - 64)) | (1L << (X - 64)) | (1L << (Y - 64)) | (1L << (Z - 64)) | (1L << (LEFT_CURLY_BRACE - 64)) | (1L << (PIPE - 64)) | (1L << (RIGHT_CURLY_BRACE - 64)) | (1L << (TILDE - 64)))) != 0)) {
					{
					{
					State = 124; printusascii();
					}
					}
					State = 129;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class App_nameContext : ParserRuleContext {
		public App_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_app_name; } }
	 
		public App_nameContext() { }
		public virtual void CopyFrom(App_nameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HeaderNilAppNameContext : App_nameContext {
		public NilvalueContext nilvalue() {
			return GetRuleContext<NilvalueContext>(0);
		}
		public HeaderNilAppNameContext(App_nameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterHeaderNilAppName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitHeaderNilAppName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderNilAppName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HeaderAppNameContext : App_nameContext {
		public PrintusasciiContext[] printusascii() {
			return GetRuleContexts<PrintusasciiContext>();
		}
		public PrintusasciiContext printusascii(int i) {
			return GetRuleContext<PrintusasciiContext>(i);
		}
		public HeaderAppNameContext(App_nameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterHeaderAppName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitHeaderAppName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderAppName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public App_nameContext app_name() {
		App_nameContext _localctx = new App_nameContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_app_name);
		int _la;
		try {
			State = 139;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				_localctx = new HeaderNilAppNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 132; nilvalue();
				}
				break;

			case 2:
				_localctx = new HeaderAppNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 136;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATION) | (1L << QUOTE) | (1L << POUND) | (1L << DOLLAR) | (1L << PERCENT) | (1L << AMPERSAND) | (1L << APOSTROPHE) | (1L << LEFT_PAREN) | (1L << RIGHT_PAREN) | (1L << ASTERISK) | (1L << PLUS) | (1L << COMMA) | (1L << DASH) | (1L << PERIOD) | (1L << SLASH) | (1L << ZERO) | (1L << ONE) | (1L << TWO) | (1L << THREE) | (1L << FOUR) | (1L << FIVE) | (1L << SIX) | (1L << SEVEN) | (1L << EIGHT) | (1L << NINE) | (1L << COLON) | (1L << SEMICOLON) | (1L << LESS_THAN) | (1L << EQUALS) | (1L << GREATER_THAN) | (1L << QUESTION) | (1L << AT) | (1L << CAP_A) | (1L << CAP_B) | (1L << CAP_C) | (1L << CAP_D) | (1L << CAP_E) | (1L << CAP_F) | (1L << CAP_G) | (1L << CAP_H) | (1L << CAP_I) | (1L << CAP_J) | (1L << CAP_K) | (1L << CAP_L) | (1L << CAP_M) | (1L << CAP_N) | (1L << CAP_O) | (1L << CAP_P) | (1L << CAP_Q) | (1L << CAP_R) | (1L << CAP_S) | (1L << CAP_T) | (1L << CAP_U) | (1L << CAP_V) | (1L << CAP_W) | (1L << CAP_X) | (1L << CAP_Y) | (1L << CAP_Z) | (1L << LEFT_BRACE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BACKSLASH - 64)) | (1L << (RIGHT_BRACE - 64)) | (1L << (CARAT - 64)) | (1L << (UNDERSCORE - 64)) | (1L << (ACCENT - 64)) | (1L << (A - 64)) | (1L << (B - 64)) | (1L << (C - 64)) | (1L << (D - 64)) | (1L << (E - 64)) | (1L << (F - 64)) | (1L << (G - 64)) | (1L << (H - 64)) | (1L << (I - 64)) | (1L << (J - 64)) | (1L << (K - 64)) | (1L << (L - 64)) | (1L << (M - 64)) | (1L << (N - 64)) | (1L << (O - 64)) | (1L << (P - 64)) | (1L << (Q - 64)) | (1L << (R - 64)) | (1L << (S - 64)) | (1L << (T - 64)) | (1L << (U - 64)) | (1L << (V - 64)) | (1L << (W - 64)) | (1L << (X - 64)) | (1L << (Y - 64)) | (1L << (Z - 64)) | (1L << (LEFT_CURLY_BRACE - 64)) | (1L << (PIPE - 64)) | (1L << (RIGHT_CURLY_BRACE - 64)) | (1L << (TILDE - 64)))) != 0)) {
					{
					{
					State = 133; printusascii();
					}
					}
					State = 138;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcidContext : ParserRuleContext {
		public ProcidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procid; } }
	 
		public ProcidContext() { }
		public virtual void CopyFrom(ProcidContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HeaderNilProcIdContext : ProcidContext {
		public NilvalueContext nilvalue() {
			return GetRuleContext<NilvalueContext>(0);
		}
		public HeaderNilProcIdContext(ProcidContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterHeaderNilProcId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitHeaderNilProcId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderNilProcId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HeaderProcIdContext : ProcidContext {
		public PrintusasciiContext[] printusascii() {
			return GetRuleContexts<PrintusasciiContext>();
		}
		public PrintusasciiContext printusascii(int i) {
			return GetRuleContext<PrintusasciiContext>(i);
		}
		public HeaderProcIdContext(ProcidContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterHeaderProcId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitHeaderProcId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderProcId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcidContext procid() {
		ProcidContext _localctx = new ProcidContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_procid);
		int _la;
		try {
			State = 148;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				_localctx = new HeaderNilProcIdContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 141; nilvalue();
				}
				break;

			case 2:
				_localctx = new HeaderProcIdContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 145;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATION) | (1L << QUOTE) | (1L << POUND) | (1L << DOLLAR) | (1L << PERCENT) | (1L << AMPERSAND) | (1L << APOSTROPHE) | (1L << LEFT_PAREN) | (1L << RIGHT_PAREN) | (1L << ASTERISK) | (1L << PLUS) | (1L << COMMA) | (1L << DASH) | (1L << PERIOD) | (1L << SLASH) | (1L << ZERO) | (1L << ONE) | (1L << TWO) | (1L << THREE) | (1L << FOUR) | (1L << FIVE) | (1L << SIX) | (1L << SEVEN) | (1L << EIGHT) | (1L << NINE) | (1L << COLON) | (1L << SEMICOLON) | (1L << LESS_THAN) | (1L << EQUALS) | (1L << GREATER_THAN) | (1L << QUESTION) | (1L << AT) | (1L << CAP_A) | (1L << CAP_B) | (1L << CAP_C) | (1L << CAP_D) | (1L << CAP_E) | (1L << CAP_F) | (1L << CAP_G) | (1L << CAP_H) | (1L << CAP_I) | (1L << CAP_J) | (1L << CAP_K) | (1L << CAP_L) | (1L << CAP_M) | (1L << CAP_N) | (1L << CAP_O) | (1L << CAP_P) | (1L << CAP_Q) | (1L << CAP_R) | (1L << CAP_S) | (1L << CAP_T) | (1L << CAP_U) | (1L << CAP_V) | (1L << CAP_W) | (1L << CAP_X) | (1L << CAP_Y) | (1L << CAP_Z) | (1L << LEFT_BRACE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BACKSLASH - 64)) | (1L << (RIGHT_BRACE - 64)) | (1L << (CARAT - 64)) | (1L << (UNDERSCORE - 64)) | (1L << (ACCENT - 64)) | (1L << (A - 64)) | (1L << (B - 64)) | (1L << (C - 64)) | (1L << (D - 64)) | (1L << (E - 64)) | (1L << (F - 64)) | (1L << (G - 64)) | (1L << (H - 64)) | (1L << (I - 64)) | (1L << (J - 64)) | (1L << (K - 64)) | (1L << (L - 64)) | (1L << (M - 64)) | (1L << (N - 64)) | (1L << (O - 64)) | (1L << (P - 64)) | (1L << (Q - 64)) | (1L << (R - 64)) | (1L << (S - 64)) | (1L << (T - 64)) | (1L << (U - 64)) | (1L << (V - 64)) | (1L << (W - 64)) | (1L << (X - 64)) | (1L << (Y - 64)) | (1L << (Z - 64)) | (1L << (LEFT_CURLY_BRACE - 64)) | (1L << (PIPE - 64)) | (1L << (RIGHT_CURLY_BRACE - 64)) | (1L << (TILDE - 64)))) != 0)) {
					{
					{
					State = 142; printusascii();
					}
					}
					State = 147;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MsgidContext : ParserRuleContext {
		public MsgidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_msgid; } }
	 
		public MsgidContext() { }
		public virtual void CopyFrom(MsgidContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HeaderNilMsgIdContext : MsgidContext {
		public NilvalueContext nilvalue() {
			return GetRuleContext<NilvalueContext>(0);
		}
		public HeaderNilMsgIdContext(MsgidContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterHeaderNilMsgId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitHeaderNilMsgId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderNilMsgId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HeaderMsgIdContext : MsgidContext {
		public PrintusasciiContext[] printusascii() {
			return GetRuleContexts<PrintusasciiContext>();
		}
		public PrintusasciiContext printusascii(int i) {
			return GetRuleContext<PrintusasciiContext>(i);
		}
		public HeaderMsgIdContext(MsgidContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterHeaderMsgId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitHeaderMsgId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderMsgId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MsgidContext msgid() {
		MsgidContext _localctx = new MsgidContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_msgid);
		int _la;
		try {
			State = 157;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				_localctx = new HeaderNilMsgIdContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 150; nilvalue();
				}
				break;

			case 2:
				_localctx = new HeaderMsgIdContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 154;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATION) | (1L << QUOTE) | (1L << POUND) | (1L << DOLLAR) | (1L << PERCENT) | (1L << AMPERSAND) | (1L << APOSTROPHE) | (1L << LEFT_PAREN) | (1L << RIGHT_PAREN) | (1L << ASTERISK) | (1L << PLUS) | (1L << COMMA) | (1L << DASH) | (1L << PERIOD) | (1L << SLASH) | (1L << ZERO) | (1L << ONE) | (1L << TWO) | (1L << THREE) | (1L << FOUR) | (1L << FIVE) | (1L << SIX) | (1L << SEVEN) | (1L << EIGHT) | (1L << NINE) | (1L << COLON) | (1L << SEMICOLON) | (1L << LESS_THAN) | (1L << EQUALS) | (1L << GREATER_THAN) | (1L << QUESTION) | (1L << AT) | (1L << CAP_A) | (1L << CAP_B) | (1L << CAP_C) | (1L << CAP_D) | (1L << CAP_E) | (1L << CAP_F) | (1L << CAP_G) | (1L << CAP_H) | (1L << CAP_I) | (1L << CAP_J) | (1L << CAP_K) | (1L << CAP_L) | (1L << CAP_M) | (1L << CAP_N) | (1L << CAP_O) | (1L << CAP_P) | (1L << CAP_Q) | (1L << CAP_R) | (1L << CAP_S) | (1L << CAP_T) | (1L << CAP_U) | (1L << CAP_V) | (1L << CAP_W) | (1L << CAP_X) | (1L << CAP_Y) | (1L << CAP_Z) | (1L << LEFT_BRACE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BACKSLASH - 64)) | (1L << (RIGHT_BRACE - 64)) | (1L << (CARAT - 64)) | (1L << (UNDERSCORE - 64)) | (1L << (ACCENT - 64)) | (1L << (A - 64)) | (1L << (B - 64)) | (1L << (C - 64)) | (1L << (D - 64)) | (1L << (E - 64)) | (1L << (F - 64)) | (1L << (G - 64)) | (1L << (H - 64)) | (1L << (I - 64)) | (1L << (J - 64)) | (1L << (K - 64)) | (1L << (L - 64)) | (1L << (M - 64)) | (1L << (N - 64)) | (1L << (O - 64)) | (1L << (P - 64)) | (1L << (Q - 64)) | (1L << (R - 64)) | (1L << (S - 64)) | (1L << (T - 64)) | (1L << (U - 64)) | (1L << (V - 64)) | (1L << (W - 64)) | (1L << (X - 64)) | (1L << (Y - 64)) | (1L << (Z - 64)) | (1L << (LEFT_CURLY_BRACE - 64)) | (1L << (PIPE - 64)) | (1L << (RIGHT_CURLY_BRACE - 64)) | (1L << (TILDE - 64)))) != 0)) {
					{
					{
					State = 151; printusascii();
					}
					}
					State = 156;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimestampContext : ParserRuleContext {
		public TimestampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timestamp; } }
	 
		public TimestampContext() { }
		public virtual void CopyFrom(TimestampContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HeaderNilTimestampContext : TimestampContext {
		public NilvalueContext nilvalue() {
			return GetRuleContext<NilvalueContext>(0);
		}
		public HeaderNilTimestampContext(TimestampContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterHeaderNilTimestamp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitHeaderNilTimestamp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderNilTimestamp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HeaderTimeStampContext : TimestampContext {
		public Full_dateContext full_date() {
			return GetRuleContext<Full_dateContext>(0);
		}
		public ITerminalNode CAP_T() { return GetToken(Rfc5424Parser.CAP_T, 0); }
		public Full_timeContext full_time() {
			return GetRuleContext<Full_timeContext>(0);
		}
		public HeaderTimeStampContext(TimestampContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterHeaderTimeStamp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitHeaderTimeStamp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderTimeStamp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimestampContext timestamp() {
		TimestampContext _localctx = new TimestampContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_timestamp);
		try {
			State = 164;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DASH:
				_localctx = new HeaderNilTimestampContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 159; nilvalue();
				}
				break;
			case ZERO:
			case ONE:
			case TWO:
			case THREE:
			case FOUR:
			case FIVE:
			case SIX:
			case SEVEN:
			case EIGHT:
			case NINE:
				_localctx = new HeaderTimeStampContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 160; full_date();
				State = 161; Match(CAP_T);
				State = 162; full_time();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_dateContext : ParserRuleContext {
		public Date_fullyearContext date_fullyear() {
			return GetRuleContext<Date_fullyearContext>(0);
		}
		public ITerminalNode[] DASH() { return GetTokens(Rfc5424Parser.DASH); }
		public ITerminalNode DASH(int i) {
			return GetToken(Rfc5424Parser.DASH, i);
		}
		public Date_monthContext date_month() {
			return GetRuleContext<Date_monthContext>(0);
		}
		public Date_mdayContext date_mday() {
			return GetRuleContext<Date_mdayContext>(0);
		}
		public Full_dateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_date; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterFull_date(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitFull_date(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_date(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_dateContext full_date() {
		Full_dateContext _localctx = new Full_dateContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_full_date);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; date_fullyear();
			State = 167; Match(DASH);
			State = 168; date_month();
			State = 169; Match(DASH);
			State = 170; date_mday();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_fullyearContext : ParserRuleContext {
		public DigitContext[] digit() {
			return GetRuleContexts<DigitContext>();
		}
		public DigitContext digit(int i) {
			return GetRuleContext<DigitContext>(i);
		}
		public Date_fullyearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_fullyear; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterDate_fullyear(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitDate_fullyear(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_fullyear(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_fullyearContext date_fullyear() {
		Date_fullyearContext _localctx = new Date_fullyearContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_date_fullyear);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; digit();
			State = 173; digit();
			State = 174; digit();
			State = 175; digit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_monthContext : ParserRuleContext {
		public DigitContext[] digit() {
			return GetRuleContexts<DigitContext>();
		}
		public DigitContext digit(int i) {
			return GetRuleContext<DigitContext>(i);
		}
		public Date_monthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_month; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterDate_month(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitDate_month(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_month(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_monthContext date_month() {
		Date_monthContext _localctx = new Date_monthContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_date_month);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; digit();
			State = 178; digit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_mdayContext : ParserRuleContext {
		public DigitContext[] digit() {
			return GetRuleContexts<DigitContext>();
		}
		public DigitContext digit(int i) {
			return GetRuleContext<DigitContext>(i);
		}
		public Date_mdayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_mday; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterDate_mday(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitDate_mday(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_mday(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_mdayContext date_mday() {
		Date_mdayContext _localctx = new Date_mdayContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_date_mday);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; digit();
			State = 181; digit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_timeContext : ParserRuleContext {
		public Partial_timeContext partial_time() {
			return GetRuleContext<Partial_timeContext>(0);
		}
		public Time_offsetContext time_offset() {
			return GetRuleContext<Time_offsetContext>(0);
		}
		public Full_timeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_time; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterFull_time(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitFull_time(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_time(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_timeContext full_time() {
		Full_timeContext _localctx = new Full_timeContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_full_time);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; partial_time();
			State = 184; time_offset();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partial_timeContext : ParserRuleContext {
		public Time_hourContext time_hour() {
			return GetRuleContext<Time_hourContext>(0);
		}
		public ITerminalNode[] COLON() { return GetTokens(Rfc5424Parser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(Rfc5424Parser.COLON, i);
		}
		public Time_minuteContext time_minute() {
			return GetRuleContext<Time_minuteContext>(0);
		}
		public Time_secondContext time_second() {
			return GetRuleContext<Time_secondContext>(0);
		}
		public Time_secfracContext time_secfrac() {
			return GetRuleContext<Time_secfracContext>(0);
		}
		public Partial_timeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partial_time; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterPartial_time(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitPartial_time(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartial_time(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partial_timeContext partial_time() {
		Partial_timeContext _localctx = new Partial_timeContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_partial_time);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; time_hour();
			State = 187; Match(COLON);
			State = 188; time_minute();
			State = 189; Match(COLON);
			State = 190; time_second();
			State = 192;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PERIOD) {
				{
				State = 191; time_secfrac();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Time_hourContext : ParserRuleContext {
		public DigitContext[] digit() {
			return GetRuleContexts<DigitContext>();
		}
		public DigitContext digit(int i) {
			return GetRuleContext<DigitContext>(i);
		}
		public Time_hourContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_hour; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterTime_hour(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitTime_hour(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime_hour(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Time_hourContext time_hour() {
		Time_hourContext _localctx = new Time_hourContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_time_hour);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; digit();
			State = 195; digit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Time_minuteContext : ParserRuleContext {
		public DigitContext[] digit() {
			return GetRuleContexts<DigitContext>();
		}
		public DigitContext digit(int i) {
			return GetRuleContext<DigitContext>(i);
		}
		public Time_minuteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_minute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterTime_minute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitTime_minute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime_minute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Time_minuteContext time_minute() {
		Time_minuteContext _localctx = new Time_minuteContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_time_minute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; digit();
			State = 198; digit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Time_secondContext : ParserRuleContext {
		public DigitContext[] digit() {
			return GetRuleContexts<DigitContext>();
		}
		public DigitContext digit(int i) {
			return GetRuleContext<DigitContext>(i);
		}
		public Time_secondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_second; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterTime_second(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitTime_second(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime_second(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Time_secondContext time_second() {
		Time_secondContext _localctx = new Time_secondContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_time_second);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; digit();
			State = 201; digit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Time_secfracContext : ParserRuleContext {
		public ITerminalNode PERIOD() { return GetToken(Rfc5424Parser.PERIOD, 0); }
		public DigitContext[] digit() {
			return GetRuleContexts<DigitContext>();
		}
		public DigitContext digit(int i) {
			return GetRuleContext<DigitContext>(i);
		}
		public Time_secfracContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_secfrac; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterTime_secfrac(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitTime_secfrac(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime_secfrac(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Time_secfracContext time_secfrac() {
		Time_secfracContext _localctx = new Time_secfracContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_time_secfrac);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(PERIOD);
			State = 204; digit();
			State = 226;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				State = 206;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ZERO) | (1L << ONE) | (1L << TWO) | (1L << THREE) | (1L << FOUR) | (1L << FIVE) | (1L << SIX) | (1L << SEVEN) | (1L << EIGHT) | (1L << NINE))) != 0)) {
					{
					State = 205; digit();
					}
				}

				}
				break;

			case 2:
				{
				{
				State = 208; digit();
				State = 209; digit();
				}
				}
				break;

			case 3:
				{
				{
				State = 211; digit();
				State = 212; digit();
				State = 213; digit();
				}
				}
				break;

			case 4:
				{
				{
				State = 215; digit();
				State = 216; digit();
				State = 217; digit();
				State = 218; digit();
				}
				}
				break;

			case 5:
				{
				{
				State = 220; digit();
				State = 221; digit();
				State = 222; digit();
				State = 223; digit();
				State = 224; digit();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Time_offsetContext : ParserRuleContext {
		public ITerminalNode CAP_Z() { return GetToken(Rfc5424Parser.CAP_Z, 0); }
		public Time_numoffsetContext time_numoffset() {
			return GetRuleContext<Time_numoffsetContext>(0);
		}
		public Time_offsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_offset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterTime_offset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitTime_offset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime_offset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Time_offsetContext time_offset() {
		Time_offsetContext _localctx = new Time_offsetContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_time_offset);
		try {
			State = 230;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CAP_Z:
				EnterOuterAlt(_localctx, 1);
				{
				State = 228; Match(CAP_Z);
				}
				break;
			case PLUS:
			case DASH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229; time_numoffset();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Time_numoffsetContext : ParserRuleContext {
		public Time_hourContext time_hour() {
			return GetRuleContext<Time_hourContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(Rfc5424Parser.COLON, 0); }
		public Time_minuteContext time_minute() {
			return GetRuleContext<Time_minuteContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(Rfc5424Parser.PLUS, 0); }
		public ITerminalNode DASH() { return GetToken(Rfc5424Parser.DASH, 0); }
		public Time_numoffsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_numoffset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterTime_numoffset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitTime_numoffset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime_numoffset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Time_numoffsetContext time_numoffset() {
		Time_numoffsetContext _localctx = new Time_numoffsetContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_time_numoffset);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			_la = _input.La(1);
			if ( !(_la==PLUS || _la==DASH) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 233; time_hour();
			State = 234; Match(COLON);
			State = 235; time_minute();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Structured_dataContext : ParserRuleContext {
		public NilvalueContext nilvalue() {
			return GetRuleContext<NilvalueContext>(0);
		}
		public ITerminalNode[] LEFT_BRACE() { return GetTokens(Rfc5424Parser.LEFT_BRACE); }
		public ITerminalNode LEFT_BRACE(int i) {
			return GetToken(Rfc5424Parser.LEFT_BRACE, i);
		}
		public Sd_elementContext[] sd_element() {
			return GetRuleContexts<Sd_elementContext>();
		}
		public Sd_elementContext sd_element(int i) {
			return GetRuleContext<Sd_elementContext>(i);
		}
		public ITerminalNode[] RIGHT_BRACE() { return GetTokens(Rfc5424Parser.RIGHT_BRACE); }
		public ITerminalNode RIGHT_BRACE(int i) {
			return GetToken(Rfc5424Parser.RIGHT_BRACE, i);
		}
		public SpContext[] sp() {
			return GetRuleContexts<SpContext>();
		}
		public SpContext sp(int i) {
			return GetRuleContext<SpContext>(i);
		}
		public Structured_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structured_data; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterStructured_data(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitStructured_data(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructured_data(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Structured_dataContext structured_data() {
		Structured_dataContext _localctx = new Structured_dataContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_structured_data);
		try {
			int _alt;
			State = 247;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 237; nilvalue();
				}
				break;
			case LEFT_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 243;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 238; Match(LEFT_BRACE);
						State = 239; sd_element();
						State = 240; Match(RIGHT_BRACE);
						State = 241; sp();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 245;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sd_elementContext : ParserRuleContext {
		public Sd_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sd_element; } }
	 
		public Sd_elementContext() { }
		public virtual void CopyFrom(Sd_elementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SdElementContext : Sd_elementContext {
		public Sd_idContext sd_id() {
			return GetRuleContext<Sd_idContext>(0);
		}
		public SpContext[] sp() {
			return GetRuleContexts<SpContext>();
		}
		public SpContext sp(int i) {
			return GetRuleContext<SpContext>(i);
		}
		public Sd_paramContext[] sd_param() {
			return GetRuleContexts<Sd_paramContext>();
		}
		public Sd_paramContext sd_param(int i) {
			return GetRuleContext<Sd_paramContext>(i);
		}
		public SdElementContext(Sd_elementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterSdElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitSdElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSdElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sd_elementContext sd_element() {
		Sd_elementContext _localctx = new Sd_elementContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_sd_element);
		int _la;
		try {
			_localctx = new SdElementContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; sd_id();
			State = 255;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SPACE) {
				{
				{
				State = 250; sp();
				State = 251; sd_param();
				}
				}
				State = 257;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sd_paramContext : ParserRuleContext {
		public Sd_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sd_param; } }
	 
		public Sd_paramContext() { }
		public virtual void CopyFrom(Sd_paramContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SdParamContext : Sd_paramContext {
		public Param_nameContext param_name() {
			return GetRuleContext<Param_nameContext>(0);
		}
		public ITerminalNode EQUALS() { return GetToken(Rfc5424Parser.EQUALS, 0); }
		public ITerminalNode[] QUOTE() { return GetTokens(Rfc5424Parser.QUOTE); }
		public ITerminalNode QUOTE(int i) {
			return GetToken(Rfc5424Parser.QUOTE, i);
		}
		public Param_valueContext param_value() {
			return GetRuleContext<Param_valueContext>(0);
		}
		public SdParamContext(Sd_paramContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterSdParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitSdParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSdParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sd_paramContext sd_param() {
		Sd_paramContext _localctx = new Sd_paramContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_sd_param);
		try {
			_localctx = new SdParamContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; param_name();
			State = 259; Match(EQUALS);
			State = 260; Match(QUOTE);
			State = 261; param_value();
			State = 262; Match(QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sd_idContext : ParserRuleContext {
		public Sd_nameContext sd_name() {
			return GetRuleContext<Sd_nameContext>(0);
		}
		public Sd_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sd_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterSd_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitSd_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSd_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sd_idContext sd_id() {
		Sd_idContext _localctx = new Sd_idContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_sd_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; sd_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_nameContext : ParserRuleContext {
		public Param_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_name; } }
	 
		public Param_nameContext() { }
		public virtual void CopyFrom(Param_nameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParamNameContext : Param_nameContext {
		public Sd_nameContext sd_name() {
			return GetRuleContext<Sd_nameContext>(0);
		}
		public ParamNameContext(Param_nameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterParamName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitParamName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_nameContext param_name() {
		Param_nameContext _localctx = new Param_nameContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_param_name);
		try {
			_localctx = new ParamNameContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; sd_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_valueContext : ParserRuleContext {
		public Param_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_value; } }
	 
		public Param_valueContext() { }
		public virtual void CopyFrom(Param_valueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParamValueContext : Param_valueContext {
		public ParamValueContext(Param_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterParamValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitParamValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_valueContext param_value() {
		Param_valueContext _localctx = new Param_valueContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_param_value);
		int _la;
		try {
			_localctx = new ParamValueContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (TAB - 1)) | (1L << (LF - 1)) | (1L << (CR - 1)) | (1L << (SPACE - 1)) | (1L << (EXCLAMATION - 1)) | (1L << (POUND - 1)) | (1L << (DOLLAR - 1)) | (1L << (PERCENT - 1)) | (1L << (AMPERSAND - 1)) | (1L << (APOSTROPHE - 1)) | (1L << (LEFT_PAREN - 1)) | (1L << (RIGHT_PAREN - 1)) | (1L << (ASTERISK - 1)) | (1L << (PLUS - 1)) | (1L << (COMMA - 1)) | (1L << (DASH - 1)) | (1L << (PERIOD - 1)) | (1L << (SLASH - 1)) | (1L << (ZERO - 1)) | (1L << (ONE - 1)) | (1L << (TWO - 1)) | (1L << (THREE - 1)) | (1L << (FOUR - 1)) | (1L << (FIVE - 1)) | (1L << (SIX - 1)) | (1L << (SEVEN - 1)) | (1L << (EIGHT - 1)) | (1L << (NINE - 1)) | (1L << (COLON - 1)) | (1L << (SEMICOLON - 1)) | (1L << (LESS_THAN - 1)) | (1L << (EQUALS - 1)) | (1L << (GREATER_THAN - 1)) | (1L << (QUESTION - 1)) | (1L << (AT - 1)) | (1L << (CAP_A - 1)) | (1L << (CAP_B - 1)) | (1L << (CAP_C - 1)) | (1L << (CAP_D - 1)) | (1L << (CAP_E - 1)) | (1L << (CAP_F - 1)) | (1L << (CAP_G - 1)) | (1L << (CAP_H - 1)) | (1L << (CAP_I - 1)) | (1L << (CAP_J - 1)) | (1L << (CAP_K - 1)) | (1L << (CAP_L - 1)) | (1L << (CAP_M - 1)) | (1L << (CAP_N - 1)) | (1L << (CAP_O - 1)) | (1L << (CAP_P - 1)) | (1L << (CAP_Q - 1)) | (1L << (CAP_R - 1)) | (1L << (CAP_S - 1)) | (1L << (CAP_T - 1)) | (1L << (CAP_U - 1)) | (1L << (CAP_V - 1)) | (1L << (CAP_W - 1)) | (1L << (CAP_X - 1)) | (1L << (CAP_Y - 1)) | (1L << (CAP_Z - 1)) | (1L << (LEFT_BRACE - 1)) | (1L << (BACKSLASH - 1)))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CARAT - 66)) | (1L << (UNDERSCORE - 66)) | (1L << (ACCENT - 66)) | (1L << (A - 66)) | (1L << (B - 66)) | (1L << (C - 66)) | (1L << (D - 66)) | (1L << (E - 66)) | (1L << (F - 66)) | (1L << (G - 66)) | (1L << (H - 66)) | (1L << (I - 66)) | (1L << (J - 66)) | (1L << (K - 66)) | (1L << (L - 66)) | (1L << (M - 66)) | (1L << (N - 66)) | (1L << (O - 66)) | (1L << (P - 66)) | (1L << (Q - 66)) | (1L << (R - 66)) | (1L << (S - 66)) | (1L << (T - 66)) | (1L << (U - 66)) | (1L << (V - 66)) | (1L << (W - 66)) | (1L << (X - 66)) | (1L << (Y - 66)) | (1L << (Z - 66)) | (1L << (LEFT_CURLY_BRACE - 66)) | (1L << (PIPE - 66)) | (1L << (RIGHT_CURLY_BRACE - 66)) | (1L << (TILDE - 66)) | (1L << (U_0000 - 66)) | (1L << (U_0001 - 66)) | (1L << (U_0002 - 66)) | (1L << (U_0003 - 66)) | (1L << (U_0004 - 66)) | (1L << (U_0005 - 66)) | (1L << (U_0006 - 66)) | (1L << (U_0007 - 66)) | (1L << (U_0008 - 66)) | (1L << (U_000B - 66)) | (1L << (U_000C - 66)) | (1L << (U_000E - 66)) | (1L << (U_000F - 66)) | (1L << (U_0010 - 66)) | (1L << (U_0011 - 66)) | (1L << (U_0012 - 66)) | (1L << (U_0013 - 66)) | (1L << (U_0014 - 66)) | (1L << (U_0015 - 66)) | (1L << (U_0016 - 66)) | (1L << (U_0017 - 66)) | (1L << (U_0018 - 66)) | (1L << (U_0019 - 66)) | (1L << (U_001A - 66)) | (1L << (U_001B - 66)) | (1L << (U_001C - 66)) | (1L << (U_001D - 66)) | (1L << (U_001E - 66)) | (1L << (U_001F - 66)) | (1L << (U_007F - 66)) | (1L << (U_0080 - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (U_0081 - 130)) | (1L << (U_0082 - 130)) | (1L << (U_0083 - 130)) | (1L << (U_0084 - 130)) | (1L << (U_0085 - 130)) | (1L << (U_0086 - 130)) | (1L << (U_0087 - 130)) | (1L << (U_0088 - 130)) | (1L << (U_0089 - 130)) | (1L << (U_008A - 130)) | (1L << (U_008B - 130)) | (1L << (U_008C - 130)) | (1L << (U_008D - 130)) | (1L << (U_008E - 130)) | (1L << (U_008F - 130)) | (1L << (U_0090 - 130)) | (1L << (U_0091 - 130)) | (1L << (U_0092 - 130)) | (1L << (U_0093 - 130)) | (1L << (U_0094 - 130)) | (1L << (U_0095 - 130)) | (1L << (U_0096 - 130)) | (1L << (U_0097 - 130)) | (1L << (U_0098 - 130)) | (1L << (U_0099 - 130)) | (1L << (U_009A - 130)) | (1L << (U_009B - 130)) | (1L << (U_009C - 130)) | (1L << (U_009D - 130)) | (1L << (U_009E - 130)) | (1L << (U_009F - 130)) | (1L << (U_00A0 - 130)) | (1L << (U_00A1 - 130)) | (1L << (U_00A2 - 130)) | (1L << (U_00A3 - 130)) | (1L << (U_00A4 - 130)) | (1L << (U_00A5 - 130)) | (1L << (U_00A6 - 130)) | (1L << (U_00A7 - 130)) | (1L << (U_00A8 - 130)) | (1L << (U_00A9 - 130)) | (1L << (U_00AA - 130)) | (1L << (U_00AB - 130)) | (1L << (U_00AC - 130)) | (1L << (U_00AD - 130)) | (1L << (U_00AE - 130)) | (1L << (U_00AF - 130)) | (1L << (U_00B0 - 130)) | (1L << (U_00B1 - 130)) | (1L << (U_00B2 - 130)) | (1L << (U_00B3 - 130)) | (1L << (U_00B4 - 130)) | (1L << (U_00B5 - 130)) | (1L << (U_00B6 - 130)) | (1L << (U_00B7 - 130)) | (1L << (U_00B8 - 130)) | (1L << (U_00B9 - 130)) | (1L << (U_00BA - 130)) | (1L << (U_00BB - 130)) | (1L << (U_00BC - 130)) | (1L << (U_00BD - 130)) | (1L << (U_00BE - 130)) | (1L << (U_00BF - 130)) | (1L << (U_00C0 - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (U_00C1 - 194)) | (1L << (U_00C2 - 194)) | (1L << (U_00C3 - 194)) | (1L << (U_00C4 - 194)) | (1L << (U_00C5 - 194)) | (1L << (U_00C6 - 194)) | (1L << (U_00C7 - 194)) | (1L << (U_00C8 - 194)) | (1L << (U_00C9 - 194)) | (1L << (U_00CA - 194)) | (1L << (U_00CB - 194)) | (1L << (U_00CC - 194)) | (1L << (U_00CD - 194)) | (1L << (U_00CE - 194)) | (1L << (U_00CF - 194)) | (1L << (U_00D0 - 194)) | (1L << (U_00D1 - 194)) | (1L << (U_00D2 - 194)) | (1L << (U_00D3 - 194)) | (1L << (U_00D4 - 194)) | (1L << (U_00D5 - 194)) | (1L << (U_00D6 - 194)) | (1L << (U_00D7 - 194)) | (1L << (U_00D8 - 194)) | (1L << (U_00D9 - 194)) | (1L << (U_00DA - 194)) | (1L << (U_00DB - 194)) | (1L << (U_00DC - 194)) | (1L << (U_00DD - 194)) | (1L << (U_00DE - 194)) | (1L << (U_00DF - 194)) | (1L << (U_00E0 - 194)) | (1L << (U_00E1 - 194)) | (1L << (U_00E2 - 194)) | (1L << (U_00E3 - 194)) | (1L << (U_00E4 - 194)) | (1L << (U_00E5 - 194)) | (1L << (U_00E6 - 194)) | (1L << (U_00E7 - 194)) | (1L << (U_00E8 - 194)) | (1L << (U_00E9 - 194)) | (1L << (U_00EA - 194)) | (1L << (U_00EB - 194)) | (1L << (U_00EC - 194)) | (1L << (U_00ED - 194)) | (1L << (U_00EE - 194)) | (1L << (U_00EF - 194)) | (1L << (U_00F0 - 194)) | (1L << (U_00F1 - 194)) | (1L << (U_00F2 - 194)) | (1L << (U_00F3 - 194)) | (1L << (U_00F4 - 194)) | (1L << (U_00F5 - 194)) | (1L << (U_00F6 - 194)) | (1L << (U_00F7 - 194)) | (1L << (U_00F8 - 194)) | (1L << (U_00F9 - 194)) | (1L << (U_00FA - 194)) | (1L << (U_00FB - 194)) | (1L << (U_00FC - 194)) | (1L << (U_00FD - 194)) | (1L << (U_00FE - 194)) | (1L << (U_00FF - 194)))) != 0)) {
				{
				State = 271;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case TAB:
				case LF:
				case CR:
				case SPACE:
				case EXCLAMATION:
				case POUND:
				case DOLLAR:
				case PERCENT:
				case AMPERSAND:
				case APOSTROPHE:
				case LEFT_PAREN:
				case RIGHT_PAREN:
				case ASTERISK:
				case PLUS:
				case COMMA:
				case DASH:
				case PERIOD:
				case SLASH:
				case ZERO:
				case ONE:
				case TWO:
				case THREE:
				case FOUR:
				case FIVE:
				case SIX:
				case SEVEN:
				case EIGHT:
				case NINE:
				case COLON:
				case SEMICOLON:
				case LESS_THAN:
				case EQUALS:
				case GREATER_THAN:
				case QUESTION:
				case AT:
				case CAP_A:
				case CAP_B:
				case CAP_C:
				case CAP_D:
				case CAP_E:
				case CAP_F:
				case CAP_G:
				case CAP_H:
				case CAP_I:
				case CAP_J:
				case CAP_K:
				case CAP_L:
				case CAP_M:
				case CAP_N:
				case CAP_O:
				case CAP_P:
				case CAP_Q:
				case CAP_R:
				case CAP_S:
				case CAP_T:
				case CAP_U:
				case CAP_V:
				case CAP_W:
				case CAP_X:
				case CAP_Y:
				case CAP_Z:
				case LEFT_BRACE:
				case CARAT:
				case UNDERSCORE:
				case ACCENT:
				case A:
				case B:
				case C:
				case D:
				case E:
				case F:
				case G:
				case H:
				case I:
				case J:
				case K:
				case L:
				case M:
				case N:
				case O:
				case P:
				case Q:
				case R:
				case S:
				case T:
				case U:
				case V:
				case W:
				case X:
				case Y:
				case Z:
				case LEFT_CURLY_BRACE:
				case PIPE:
				case RIGHT_CURLY_BRACE:
				case TILDE:
				case U_0000:
				case U_0001:
				case U_0002:
				case U_0003:
				case U_0004:
				case U_0005:
				case U_0006:
				case U_0007:
				case U_0008:
				case U_000B:
				case U_000C:
				case U_000E:
				case U_000F:
				case U_0010:
				case U_0011:
				case U_0012:
				case U_0013:
				case U_0014:
				case U_0015:
				case U_0016:
				case U_0017:
				case U_0018:
				case U_0019:
				case U_001A:
				case U_001B:
				case U_001C:
				case U_001D:
				case U_001E:
				case U_001F:
				case U_007F:
				case U_0080:
				case U_0081:
				case U_0082:
				case U_0083:
				case U_0084:
				case U_0085:
				case U_0086:
				case U_0087:
				case U_0088:
				case U_0089:
				case U_008A:
				case U_008B:
				case U_008C:
				case U_008D:
				case U_008E:
				case U_008F:
				case U_0090:
				case U_0091:
				case U_0092:
				case U_0093:
				case U_0094:
				case U_0095:
				case U_0096:
				case U_0097:
				case U_0098:
				case U_0099:
				case U_009A:
				case U_009B:
				case U_009C:
				case U_009D:
				case U_009E:
				case U_009F:
				case U_00A0:
				case U_00A1:
				case U_00A2:
				case U_00A3:
				case U_00A4:
				case U_00A5:
				case U_00A6:
				case U_00A7:
				case U_00A8:
				case U_00A9:
				case U_00AA:
				case U_00AB:
				case U_00AC:
				case U_00AD:
				case U_00AE:
				case U_00AF:
				case U_00B0:
				case U_00B1:
				case U_00B2:
				case U_00B3:
				case U_00B4:
				case U_00B5:
				case U_00B6:
				case U_00B7:
				case U_00B8:
				case U_00B9:
				case U_00BA:
				case U_00BB:
				case U_00BC:
				case U_00BD:
				case U_00BE:
				case U_00BF:
				case U_00C0:
				case U_00C1:
				case U_00C2:
				case U_00C3:
				case U_00C4:
				case U_00C5:
				case U_00C6:
				case U_00C7:
				case U_00C8:
				case U_00C9:
				case U_00CA:
				case U_00CB:
				case U_00CC:
				case U_00CD:
				case U_00CE:
				case U_00CF:
				case U_00D0:
				case U_00D1:
				case U_00D2:
				case U_00D3:
				case U_00D4:
				case U_00D5:
				case U_00D6:
				case U_00D7:
				case U_00D8:
				case U_00D9:
				case U_00DA:
				case U_00DB:
				case U_00DC:
				case U_00DD:
				case U_00DE:
				case U_00DF:
				case U_00E0:
				case U_00E1:
				case U_00E2:
				case U_00E3:
				case U_00E4:
				case U_00E5:
				case U_00E6:
				case U_00E7:
				case U_00E8:
				case U_00E9:
				case U_00EA:
				case U_00EB:
				case U_00EC:
				case U_00ED:
				case U_00EE:
				case U_00EF:
				case U_00F0:
				case U_00F1:
				case U_00F2:
				case U_00F3:
				case U_00F4:
				case U_00F5:
				case U_00F6:
				case U_00F7:
				case U_00F8:
				case U_00F9:
				case U_00FA:
				case U_00FB:
				case U_00FC:
				case U_00FD:
				case U_00FE:
				case U_00FF:
					{
					State = 268;
					_la = _input.La(1);
					if ( _la <= 0 || (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (QUOTE - 6)) | (1L << (BACKSLASH - 6)) | (1L << (RIGHT_BRACE - 6)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case BACKSLASH:
					{
					State = 269; Match(BACKSLASH);
					State = 270;
					_la = _input.La(1);
					if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (QUOTE - 6)) | (1L << (BACKSLASH - 6)) | (1L << (RIGHT_BRACE - 6)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 275;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sd_nameContext : ParserRuleContext {
		public PrintusasciinospecialsContext[] printusasciinospecials() {
			return GetRuleContexts<PrintusasciinospecialsContext>();
		}
		public PrintusasciinospecialsContext printusasciinospecials(int i) {
			return GetRuleContext<PrintusasciinospecialsContext>(i);
		}
		public Sd_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sd_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterSd_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitSd_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSd_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sd_nameContext sd_name() {
		Sd_nameContext _localctx = new Sd_nameContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_sd_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATION) | (1L << POUND) | (1L << DOLLAR) | (1L << PERCENT) | (1L << AMPERSAND) | (1L << APOSTROPHE) | (1L << LEFT_PAREN) | (1L << RIGHT_PAREN) | (1L << ASTERISK) | (1L << PLUS) | (1L << COMMA) | (1L << DASH) | (1L << PERIOD) | (1L << SLASH) | (1L << ZERO) | (1L << ONE) | (1L << TWO) | (1L << THREE) | (1L << FOUR) | (1L << FIVE) | (1L << SIX) | (1L << SEVEN) | (1L << EIGHT) | (1L << NINE) | (1L << COLON) | (1L << SEMICOLON) | (1L << LESS_THAN) | (1L << GREATER_THAN) | (1L << QUESTION) | (1L << AT) | (1L << CAP_A) | (1L << CAP_B) | (1L << CAP_C) | (1L << CAP_D) | (1L << CAP_E) | (1L << CAP_F) | (1L << CAP_G) | (1L << CAP_H) | (1L << CAP_I) | (1L << CAP_J) | (1L << CAP_K) | (1L << CAP_L) | (1L << CAP_M) | (1L << CAP_N) | (1L << CAP_O) | (1L << CAP_P) | (1L << CAP_Q) | (1L << CAP_R) | (1L << CAP_S) | (1L << CAP_T) | (1L << CAP_U) | (1L << CAP_V) | (1L << CAP_W) | (1L << CAP_X) | (1L << CAP_Y) | (1L << CAP_Z) | (1L << LEFT_BRACE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BACKSLASH - 64)) | (1L << (CARAT - 64)) | (1L << (UNDERSCORE - 64)) | (1L << (ACCENT - 64)) | (1L << (A - 64)) | (1L << (B - 64)) | (1L << (C - 64)) | (1L << (D - 64)) | (1L << (E - 64)) | (1L << (F - 64)) | (1L << (G - 64)) | (1L << (H - 64)) | (1L << (I - 64)) | (1L << (J - 64)) | (1L << (K - 64)) | (1L << (L - 64)) | (1L << (M - 64)) | (1L << (N - 64)) | (1L << (O - 64)) | (1L << (P - 64)) | (1L << (Q - 64)) | (1L << (R - 64)) | (1L << (S - 64)) | (1L << (T - 64)) | (1L << (U - 64)) | (1L << (V - 64)) | (1L << (W - 64)) | (1L << (X - 64)) | (1L << (Y - 64)) | (1L << (Z - 64)) | (1L << (LEFT_CURLY_BRACE - 64)) | (1L << (PIPE - 64)) | (1L << (RIGHT_CURLY_BRACE - 64)) | (1L << (TILDE - 64)))) != 0)) {
				{
				{
				State = 276; printusasciinospecials();
				}
				}
				State = 281;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MsgContext : ParserRuleContext {
		public MsgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_msg; } }
	 
		public MsgContext() { }
		public virtual void CopyFrom(MsgContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MsgUTF8Context : MsgContext {
		public Msg_utf8Context msg_utf8() {
			return GetRuleContext<Msg_utf8Context>(0);
		}
		public MsgUTF8Context(MsgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterMsgUTF8(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitMsgUTF8(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMsgUTF8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MsgAnyContext : MsgContext {
		public Msg_anyContext msg_any() {
			return GetRuleContext<Msg_anyContext>(0);
		}
		public MsgAnyContext(MsgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterMsgAny(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitMsgAny(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMsgAny(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MsgContext msg() {
		MsgContext _localctx = new MsgContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_msg);
		try {
			State = 284;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				_localctx = new MsgAnyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 282; msg_any();
				}
				break;

			case 2:
				_localctx = new MsgUTF8Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 283; msg_utf8();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Msg_anyContext : ParserRuleContext {
		public OctetContext[] octet() {
			return GetRuleContexts<OctetContext>();
		}
		public OctetContext octet(int i) {
			return GetRuleContext<OctetContext>(i);
		}
		public Msg_anyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_msg_any; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterMsg_any(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitMsg_any(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMsg_any(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Msg_anyContext msg_any() {
		Msg_anyContext _localctx = new Msg_anyContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_msg_any);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (TAB - 1)) | (1L << (LF - 1)) | (1L << (CR - 1)) | (1L << (SPACE - 1)) | (1L << (EXCLAMATION - 1)) | (1L << (QUOTE - 1)) | (1L << (POUND - 1)) | (1L << (DOLLAR - 1)) | (1L << (PERCENT - 1)) | (1L << (AMPERSAND - 1)) | (1L << (APOSTROPHE - 1)) | (1L << (LEFT_PAREN - 1)) | (1L << (RIGHT_PAREN - 1)) | (1L << (ASTERISK - 1)) | (1L << (PLUS - 1)) | (1L << (COMMA - 1)) | (1L << (DASH - 1)) | (1L << (PERIOD - 1)) | (1L << (SLASH - 1)) | (1L << (ZERO - 1)) | (1L << (ONE - 1)) | (1L << (TWO - 1)) | (1L << (THREE - 1)) | (1L << (FOUR - 1)) | (1L << (FIVE - 1)) | (1L << (SIX - 1)) | (1L << (SEVEN - 1)) | (1L << (EIGHT - 1)) | (1L << (NINE - 1)) | (1L << (COLON - 1)) | (1L << (SEMICOLON - 1)) | (1L << (LESS_THAN - 1)) | (1L << (EQUALS - 1)) | (1L << (GREATER_THAN - 1)) | (1L << (QUESTION - 1)) | (1L << (AT - 1)) | (1L << (CAP_A - 1)) | (1L << (CAP_B - 1)) | (1L << (CAP_C - 1)) | (1L << (CAP_D - 1)) | (1L << (CAP_E - 1)) | (1L << (CAP_F - 1)) | (1L << (CAP_G - 1)) | (1L << (CAP_H - 1)) | (1L << (CAP_I - 1)) | (1L << (CAP_J - 1)) | (1L << (CAP_K - 1)) | (1L << (CAP_L - 1)) | (1L << (CAP_M - 1)) | (1L << (CAP_N - 1)) | (1L << (CAP_O - 1)) | (1L << (CAP_P - 1)) | (1L << (CAP_Q - 1)) | (1L << (CAP_R - 1)) | (1L << (CAP_S - 1)) | (1L << (CAP_T - 1)) | (1L << (CAP_U - 1)) | (1L << (CAP_V - 1)) | (1L << (CAP_W - 1)) | (1L << (CAP_X - 1)) | (1L << (CAP_Y - 1)) | (1L << (CAP_Z - 1)) | (1L << (LEFT_BRACE - 1)) | (1L << (BACKSLASH - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (RIGHT_BRACE - 65)) | (1L << (CARAT - 65)) | (1L << (UNDERSCORE - 65)) | (1L << (ACCENT - 65)) | (1L << (A - 65)) | (1L << (B - 65)) | (1L << (C - 65)) | (1L << (D - 65)) | (1L << (E - 65)) | (1L << (F - 65)) | (1L << (G - 65)) | (1L << (H - 65)) | (1L << (I - 65)) | (1L << (J - 65)) | (1L << (K - 65)) | (1L << (L - 65)) | (1L << (M - 65)) | (1L << (N - 65)) | (1L << (O - 65)) | (1L << (P - 65)) | (1L << (Q - 65)) | (1L << (R - 65)) | (1L << (S - 65)) | (1L << (T - 65)) | (1L << (U - 65)) | (1L << (V - 65)) | (1L << (W - 65)) | (1L << (X - 65)) | (1L << (Y - 65)) | (1L << (Z - 65)) | (1L << (LEFT_CURLY_BRACE - 65)) | (1L << (PIPE - 65)) | (1L << (RIGHT_CURLY_BRACE - 65)) | (1L << (TILDE - 65)) | (1L << (U_0000 - 65)) | (1L << (U_0001 - 65)) | (1L << (U_0002 - 65)) | (1L << (U_0003 - 65)) | (1L << (U_0004 - 65)) | (1L << (U_0005 - 65)) | (1L << (U_0006 - 65)) | (1L << (U_0007 - 65)) | (1L << (U_0008 - 65)) | (1L << (U_000B - 65)) | (1L << (U_000C - 65)) | (1L << (U_000E - 65)) | (1L << (U_000F - 65)) | (1L << (U_0010 - 65)) | (1L << (U_0011 - 65)) | (1L << (U_0012 - 65)) | (1L << (U_0013 - 65)) | (1L << (U_0014 - 65)) | (1L << (U_0015 - 65)) | (1L << (U_0016 - 65)) | (1L << (U_0017 - 65)) | (1L << (U_0018 - 65)) | (1L << (U_0019 - 65)) | (1L << (U_001A - 65)) | (1L << (U_001B - 65)) | (1L << (U_001C - 65)) | (1L << (U_001D - 65)) | (1L << (U_001E - 65)) | (1L << (U_001F - 65)) | (1L << (U_007F - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (U_0080 - 129)) | (1L << (U_0081 - 129)) | (1L << (U_0082 - 129)) | (1L << (U_0083 - 129)) | (1L << (U_0084 - 129)) | (1L << (U_0085 - 129)) | (1L << (U_0086 - 129)) | (1L << (U_0087 - 129)) | (1L << (U_0088 - 129)) | (1L << (U_0089 - 129)) | (1L << (U_008A - 129)) | (1L << (U_008B - 129)) | (1L << (U_008C - 129)) | (1L << (U_008D - 129)) | (1L << (U_008E - 129)) | (1L << (U_008F - 129)) | (1L << (U_0090 - 129)) | (1L << (U_0091 - 129)) | (1L << (U_0092 - 129)) | (1L << (U_0093 - 129)) | (1L << (U_0094 - 129)) | (1L << (U_0095 - 129)) | (1L << (U_0096 - 129)) | (1L << (U_0097 - 129)) | (1L << (U_0098 - 129)) | (1L << (U_0099 - 129)) | (1L << (U_009A - 129)) | (1L << (U_009B - 129)) | (1L << (U_009C - 129)) | (1L << (U_009D - 129)) | (1L << (U_009E - 129)) | (1L << (U_009F - 129)) | (1L << (U_00A0 - 129)) | (1L << (U_00A1 - 129)) | (1L << (U_00A2 - 129)) | (1L << (U_00A3 - 129)) | (1L << (U_00A4 - 129)) | (1L << (U_00A5 - 129)) | (1L << (U_00A6 - 129)) | (1L << (U_00A7 - 129)) | (1L << (U_00A8 - 129)) | (1L << (U_00A9 - 129)) | (1L << (U_00AA - 129)) | (1L << (U_00AB - 129)) | (1L << (U_00AC - 129)) | (1L << (U_00AD - 129)) | (1L << (U_00AE - 129)) | (1L << (U_00AF - 129)) | (1L << (U_00B0 - 129)) | (1L << (U_00B1 - 129)) | (1L << (U_00B2 - 129)) | (1L << (U_00B3 - 129)) | (1L << (U_00B4 - 129)) | (1L << (U_00B5 - 129)) | (1L << (U_00B6 - 129)) | (1L << (U_00B7 - 129)) | (1L << (U_00B8 - 129)) | (1L << (U_00B9 - 129)) | (1L << (U_00BA - 129)) | (1L << (U_00BB - 129)) | (1L << (U_00BC - 129)) | (1L << (U_00BD - 129)) | (1L << (U_00BE - 129)) | (1L << (U_00BF - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (U_00C0 - 193)) | (1L << (U_00C1 - 193)) | (1L << (U_00C2 - 193)) | (1L << (U_00C3 - 193)) | (1L << (U_00C4 - 193)) | (1L << (U_00C5 - 193)) | (1L << (U_00C6 - 193)) | (1L << (U_00C7 - 193)) | (1L << (U_00C8 - 193)) | (1L << (U_00C9 - 193)) | (1L << (U_00CA - 193)) | (1L << (U_00CB - 193)) | (1L << (U_00CC - 193)) | (1L << (U_00CD - 193)) | (1L << (U_00CE - 193)) | (1L << (U_00CF - 193)) | (1L << (U_00D0 - 193)) | (1L << (U_00D1 - 193)) | (1L << (U_00D2 - 193)) | (1L << (U_00D3 - 193)) | (1L << (U_00D4 - 193)) | (1L << (U_00D5 - 193)) | (1L << (U_00D6 - 193)) | (1L << (U_00D7 - 193)) | (1L << (U_00D8 - 193)) | (1L << (U_00D9 - 193)) | (1L << (U_00DA - 193)) | (1L << (U_00DB - 193)) | (1L << (U_00DC - 193)) | (1L << (U_00DD - 193)) | (1L << (U_00DE - 193)) | (1L << (U_00DF - 193)) | (1L << (U_00E0 - 193)) | (1L << (U_00E1 - 193)) | (1L << (U_00E2 - 193)) | (1L << (U_00E3 - 193)) | (1L << (U_00E4 - 193)) | (1L << (U_00E5 - 193)) | (1L << (U_00E6 - 193)) | (1L << (U_00E7 - 193)) | (1L << (U_00E8 - 193)) | (1L << (U_00E9 - 193)) | (1L << (U_00EA - 193)) | (1L << (U_00EB - 193)) | (1L << (U_00EC - 193)) | (1L << (U_00ED - 193)) | (1L << (U_00EE - 193)) | (1L << (U_00EF - 193)) | (1L << (U_00F0 - 193)) | (1L << (U_00F1 - 193)) | (1L << (U_00F2 - 193)) | (1L << (U_00F3 - 193)) | (1L << (U_00F4 - 193)) | (1L << (U_00F5 - 193)) | (1L << (U_00F6 - 193)) | (1L << (U_00F7 - 193)) | (1L << (U_00F8 - 193)) | (1L << (U_00F9 - 193)) | (1L << (U_00FA - 193)) | (1L << (U_00FB - 193)) | (1L << (U_00FC - 193)) | (1L << (U_00FD - 193)) | (1L << (U_00FE - 193)) | (1L << (U_00FF - 193)))) != 0)) {
				{
				{
				State = 286; octet();
				}
				}
				State = 291;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Msg_utf8Context : ParserRuleContext {
		public BomContext bom() {
			return GetRuleContext<BomContext>(0);
		}
		public Utf_8_stringContext utf_8_string() {
			return GetRuleContext<Utf_8_stringContext>(0);
		}
		public Msg_utf8Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_msg_utf8; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterMsg_utf8(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitMsg_utf8(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMsg_utf8(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Msg_utf8Context msg_utf8() {
		Msg_utf8Context _localctx = new Msg_utf8Context(_ctx, State);
		EnterRule(_localctx, 62, RULE_msg_utf8);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; bom();
			State = 293; utf_8_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BomContext : ParserRuleContext {
		public ITerminalNode U_00EF() { return GetToken(Rfc5424Parser.U_00EF, 0); }
		public ITerminalNode U_00BB() { return GetToken(Rfc5424Parser.U_00BB, 0); }
		public ITerminalNode U_00BF() { return GetToken(Rfc5424Parser.U_00BF, 0); }
		public BomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterBom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitBom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BomContext bom() {
		BomContext _localctx = new BomContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_bom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			_la = _input.La(1);
			if ( !(((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (U_00BB - 188)) | (1L << (U_00BF - 188)) | (1L << (U_00EF - 188)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Utf_8_stringContext : ParserRuleContext {
		public OctetContext[] octet() {
			return GetRuleContexts<OctetContext>();
		}
		public OctetContext octet(int i) {
			return GetRuleContext<OctetContext>(i);
		}
		public Utf_8_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_utf_8_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterUtf_8_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitUtf_8_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUtf_8_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Utf_8_stringContext utf_8_string() {
		Utf_8_stringContext _localctx = new Utf_8_stringContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_utf_8_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (TAB - 1)) | (1L << (LF - 1)) | (1L << (CR - 1)) | (1L << (SPACE - 1)) | (1L << (EXCLAMATION - 1)) | (1L << (QUOTE - 1)) | (1L << (POUND - 1)) | (1L << (DOLLAR - 1)) | (1L << (PERCENT - 1)) | (1L << (AMPERSAND - 1)) | (1L << (APOSTROPHE - 1)) | (1L << (LEFT_PAREN - 1)) | (1L << (RIGHT_PAREN - 1)) | (1L << (ASTERISK - 1)) | (1L << (PLUS - 1)) | (1L << (COMMA - 1)) | (1L << (DASH - 1)) | (1L << (PERIOD - 1)) | (1L << (SLASH - 1)) | (1L << (ZERO - 1)) | (1L << (ONE - 1)) | (1L << (TWO - 1)) | (1L << (THREE - 1)) | (1L << (FOUR - 1)) | (1L << (FIVE - 1)) | (1L << (SIX - 1)) | (1L << (SEVEN - 1)) | (1L << (EIGHT - 1)) | (1L << (NINE - 1)) | (1L << (COLON - 1)) | (1L << (SEMICOLON - 1)) | (1L << (LESS_THAN - 1)) | (1L << (EQUALS - 1)) | (1L << (GREATER_THAN - 1)) | (1L << (QUESTION - 1)) | (1L << (AT - 1)) | (1L << (CAP_A - 1)) | (1L << (CAP_B - 1)) | (1L << (CAP_C - 1)) | (1L << (CAP_D - 1)) | (1L << (CAP_E - 1)) | (1L << (CAP_F - 1)) | (1L << (CAP_G - 1)) | (1L << (CAP_H - 1)) | (1L << (CAP_I - 1)) | (1L << (CAP_J - 1)) | (1L << (CAP_K - 1)) | (1L << (CAP_L - 1)) | (1L << (CAP_M - 1)) | (1L << (CAP_N - 1)) | (1L << (CAP_O - 1)) | (1L << (CAP_P - 1)) | (1L << (CAP_Q - 1)) | (1L << (CAP_R - 1)) | (1L << (CAP_S - 1)) | (1L << (CAP_T - 1)) | (1L << (CAP_U - 1)) | (1L << (CAP_V - 1)) | (1L << (CAP_W - 1)) | (1L << (CAP_X - 1)) | (1L << (CAP_Y - 1)) | (1L << (CAP_Z - 1)) | (1L << (LEFT_BRACE - 1)) | (1L << (BACKSLASH - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (RIGHT_BRACE - 65)) | (1L << (CARAT - 65)) | (1L << (UNDERSCORE - 65)) | (1L << (ACCENT - 65)) | (1L << (A - 65)) | (1L << (B - 65)) | (1L << (C - 65)) | (1L << (D - 65)) | (1L << (E - 65)) | (1L << (F - 65)) | (1L << (G - 65)) | (1L << (H - 65)) | (1L << (I - 65)) | (1L << (J - 65)) | (1L << (K - 65)) | (1L << (L - 65)) | (1L << (M - 65)) | (1L << (N - 65)) | (1L << (O - 65)) | (1L << (P - 65)) | (1L << (Q - 65)) | (1L << (R - 65)) | (1L << (S - 65)) | (1L << (T - 65)) | (1L << (U - 65)) | (1L << (V - 65)) | (1L << (W - 65)) | (1L << (X - 65)) | (1L << (Y - 65)) | (1L << (Z - 65)) | (1L << (LEFT_CURLY_BRACE - 65)) | (1L << (PIPE - 65)) | (1L << (RIGHT_CURLY_BRACE - 65)) | (1L << (TILDE - 65)) | (1L << (U_0000 - 65)) | (1L << (U_0001 - 65)) | (1L << (U_0002 - 65)) | (1L << (U_0003 - 65)) | (1L << (U_0004 - 65)) | (1L << (U_0005 - 65)) | (1L << (U_0006 - 65)) | (1L << (U_0007 - 65)) | (1L << (U_0008 - 65)) | (1L << (U_000B - 65)) | (1L << (U_000C - 65)) | (1L << (U_000E - 65)) | (1L << (U_000F - 65)) | (1L << (U_0010 - 65)) | (1L << (U_0011 - 65)) | (1L << (U_0012 - 65)) | (1L << (U_0013 - 65)) | (1L << (U_0014 - 65)) | (1L << (U_0015 - 65)) | (1L << (U_0016 - 65)) | (1L << (U_0017 - 65)) | (1L << (U_0018 - 65)) | (1L << (U_0019 - 65)) | (1L << (U_001A - 65)) | (1L << (U_001B - 65)) | (1L << (U_001C - 65)) | (1L << (U_001D - 65)) | (1L << (U_001E - 65)) | (1L << (U_001F - 65)) | (1L << (U_007F - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (U_0080 - 129)) | (1L << (U_0081 - 129)) | (1L << (U_0082 - 129)) | (1L << (U_0083 - 129)) | (1L << (U_0084 - 129)) | (1L << (U_0085 - 129)) | (1L << (U_0086 - 129)) | (1L << (U_0087 - 129)) | (1L << (U_0088 - 129)) | (1L << (U_0089 - 129)) | (1L << (U_008A - 129)) | (1L << (U_008B - 129)) | (1L << (U_008C - 129)) | (1L << (U_008D - 129)) | (1L << (U_008E - 129)) | (1L << (U_008F - 129)) | (1L << (U_0090 - 129)) | (1L << (U_0091 - 129)) | (1L << (U_0092 - 129)) | (1L << (U_0093 - 129)) | (1L << (U_0094 - 129)) | (1L << (U_0095 - 129)) | (1L << (U_0096 - 129)) | (1L << (U_0097 - 129)) | (1L << (U_0098 - 129)) | (1L << (U_0099 - 129)) | (1L << (U_009A - 129)) | (1L << (U_009B - 129)) | (1L << (U_009C - 129)) | (1L << (U_009D - 129)) | (1L << (U_009E - 129)) | (1L << (U_009F - 129)) | (1L << (U_00A0 - 129)) | (1L << (U_00A1 - 129)) | (1L << (U_00A2 - 129)) | (1L << (U_00A3 - 129)) | (1L << (U_00A4 - 129)) | (1L << (U_00A5 - 129)) | (1L << (U_00A6 - 129)) | (1L << (U_00A7 - 129)) | (1L << (U_00A8 - 129)) | (1L << (U_00A9 - 129)) | (1L << (U_00AA - 129)) | (1L << (U_00AB - 129)) | (1L << (U_00AC - 129)) | (1L << (U_00AD - 129)) | (1L << (U_00AE - 129)) | (1L << (U_00AF - 129)) | (1L << (U_00B0 - 129)) | (1L << (U_00B1 - 129)) | (1L << (U_00B2 - 129)) | (1L << (U_00B3 - 129)) | (1L << (U_00B4 - 129)) | (1L << (U_00B5 - 129)) | (1L << (U_00B6 - 129)) | (1L << (U_00B7 - 129)) | (1L << (U_00B8 - 129)) | (1L << (U_00B9 - 129)) | (1L << (U_00BA - 129)) | (1L << (U_00BB - 129)) | (1L << (U_00BC - 129)) | (1L << (U_00BD - 129)) | (1L << (U_00BE - 129)) | (1L << (U_00BF - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (U_00C0 - 193)) | (1L << (U_00C1 - 193)) | (1L << (U_00C2 - 193)) | (1L << (U_00C3 - 193)) | (1L << (U_00C4 - 193)) | (1L << (U_00C5 - 193)) | (1L << (U_00C6 - 193)) | (1L << (U_00C7 - 193)) | (1L << (U_00C8 - 193)) | (1L << (U_00C9 - 193)) | (1L << (U_00CA - 193)) | (1L << (U_00CB - 193)) | (1L << (U_00CC - 193)) | (1L << (U_00CD - 193)) | (1L << (U_00CE - 193)) | (1L << (U_00CF - 193)) | (1L << (U_00D0 - 193)) | (1L << (U_00D1 - 193)) | (1L << (U_00D2 - 193)) | (1L << (U_00D3 - 193)) | (1L << (U_00D4 - 193)) | (1L << (U_00D5 - 193)) | (1L << (U_00D6 - 193)) | (1L << (U_00D7 - 193)) | (1L << (U_00D8 - 193)) | (1L << (U_00D9 - 193)) | (1L << (U_00DA - 193)) | (1L << (U_00DB - 193)) | (1L << (U_00DC - 193)) | (1L << (U_00DD - 193)) | (1L << (U_00DE - 193)) | (1L << (U_00DF - 193)) | (1L << (U_00E0 - 193)) | (1L << (U_00E1 - 193)) | (1L << (U_00E2 - 193)) | (1L << (U_00E3 - 193)) | (1L << (U_00E4 - 193)) | (1L << (U_00E5 - 193)) | (1L << (U_00E6 - 193)) | (1L << (U_00E7 - 193)) | (1L << (U_00E8 - 193)) | (1L << (U_00E9 - 193)) | (1L << (U_00EA - 193)) | (1L << (U_00EB - 193)) | (1L << (U_00EC - 193)) | (1L << (U_00ED - 193)) | (1L << (U_00EE - 193)) | (1L << (U_00EF - 193)) | (1L << (U_00F0 - 193)) | (1L << (U_00F1 - 193)) | (1L << (U_00F2 - 193)) | (1L << (U_00F3 - 193)) | (1L << (U_00F4 - 193)) | (1L << (U_00F5 - 193)) | (1L << (U_00F6 - 193)) | (1L << (U_00F7 - 193)) | (1L << (U_00F8 - 193)) | (1L << (U_00F9 - 193)) | (1L << (U_00FA - 193)) | (1L << (U_00FB - 193)) | (1L << (U_00FC - 193)) | (1L << (U_00FD - 193)) | (1L << (U_00FE - 193)) | (1L << (U_00FF - 193)))) != 0)) {
				{
				{
				State = 297; octet();
				}
				}
				State = 302;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OctetContext : ParserRuleContext {
		public ITerminalNode U_0000() { return GetToken(Rfc5424Parser.U_0000, 0); }
		public ITerminalNode U_0001() { return GetToken(Rfc5424Parser.U_0001, 0); }
		public ITerminalNode U_0002() { return GetToken(Rfc5424Parser.U_0002, 0); }
		public ITerminalNode U_0003() { return GetToken(Rfc5424Parser.U_0003, 0); }
		public ITerminalNode U_0004() { return GetToken(Rfc5424Parser.U_0004, 0); }
		public ITerminalNode U_0005() { return GetToken(Rfc5424Parser.U_0005, 0); }
		public ITerminalNode U_0006() { return GetToken(Rfc5424Parser.U_0006, 0); }
		public ITerminalNode U_0007() { return GetToken(Rfc5424Parser.U_0007, 0); }
		public ITerminalNode U_0008() { return GetToken(Rfc5424Parser.U_0008, 0); }
		public ITerminalNode TAB() { return GetToken(Rfc5424Parser.TAB, 0); }
		public ITerminalNode LF() { return GetToken(Rfc5424Parser.LF, 0); }
		public ITerminalNode U_000B() { return GetToken(Rfc5424Parser.U_000B, 0); }
		public ITerminalNode U_000C() { return GetToken(Rfc5424Parser.U_000C, 0); }
		public ITerminalNode CR() { return GetToken(Rfc5424Parser.CR, 0); }
		public ITerminalNode U_000E() { return GetToken(Rfc5424Parser.U_000E, 0); }
		public ITerminalNode U_000F() { return GetToken(Rfc5424Parser.U_000F, 0); }
		public ITerminalNode U_0010() { return GetToken(Rfc5424Parser.U_0010, 0); }
		public ITerminalNode U_0011() { return GetToken(Rfc5424Parser.U_0011, 0); }
		public ITerminalNode U_0012() { return GetToken(Rfc5424Parser.U_0012, 0); }
		public ITerminalNode U_0013() { return GetToken(Rfc5424Parser.U_0013, 0); }
		public ITerminalNode U_0014() { return GetToken(Rfc5424Parser.U_0014, 0); }
		public ITerminalNode U_0015() { return GetToken(Rfc5424Parser.U_0015, 0); }
		public ITerminalNode U_0016() { return GetToken(Rfc5424Parser.U_0016, 0); }
		public ITerminalNode U_0017() { return GetToken(Rfc5424Parser.U_0017, 0); }
		public ITerminalNode U_0018() { return GetToken(Rfc5424Parser.U_0018, 0); }
		public ITerminalNode U_0019() { return GetToken(Rfc5424Parser.U_0019, 0); }
		public ITerminalNode U_001A() { return GetToken(Rfc5424Parser.U_001A, 0); }
		public ITerminalNode U_001B() { return GetToken(Rfc5424Parser.U_001B, 0); }
		public ITerminalNode U_001C() { return GetToken(Rfc5424Parser.U_001C, 0); }
		public ITerminalNode U_001D() { return GetToken(Rfc5424Parser.U_001D, 0); }
		public ITerminalNode U_001E() { return GetToken(Rfc5424Parser.U_001E, 0); }
		public ITerminalNode U_001F() { return GetToken(Rfc5424Parser.U_001F, 0); }
		public ITerminalNode SPACE() { return GetToken(Rfc5424Parser.SPACE, 0); }
		public ITerminalNode EXCLAMATION() { return GetToken(Rfc5424Parser.EXCLAMATION, 0); }
		public ITerminalNode QUOTE() { return GetToken(Rfc5424Parser.QUOTE, 0); }
		public ITerminalNode POUND() { return GetToken(Rfc5424Parser.POUND, 0); }
		public ITerminalNode DOLLAR() { return GetToken(Rfc5424Parser.DOLLAR, 0); }
		public ITerminalNode PERCENT() { return GetToken(Rfc5424Parser.PERCENT, 0); }
		public ITerminalNode AMPERSAND() { return GetToken(Rfc5424Parser.AMPERSAND, 0); }
		public ITerminalNode APOSTROPHE() { return GetToken(Rfc5424Parser.APOSTROPHE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(Rfc5424Parser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(Rfc5424Parser.RIGHT_PAREN, 0); }
		public ITerminalNode ASTERISK() { return GetToken(Rfc5424Parser.ASTERISK, 0); }
		public ITerminalNode PLUS() { return GetToken(Rfc5424Parser.PLUS, 0); }
		public ITerminalNode COMMA() { return GetToken(Rfc5424Parser.COMMA, 0); }
		public ITerminalNode DASH() { return GetToken(Rfc5424Parser.DASH, 0); }
		public ITerminalNode PERIOD() { return GetToken(Rfc5424Parser.PERIOD, 0); }
		public ITerminalNode SLASH() { return GetToken(Rfc5424Parser.SLASH, 0); }
		public ITerminalNode ZERO() { return GetToken(Rfc5424Parser.ZERO, 0); }
		public ITerminalNode ONE() { return GetToken(Rfc5424Parser.ONE, 0); }
		public ITerminalNode TWO() { return GetToken(Rfc5424Parser.TWO, 0); }
		public ITerminalNode THREE() { return GetToken(Rfc5424Parser.THREE, 0); }
		public ITerminalNode FOUR() { return GetToken(Rfc5424Parser.FOUR, 0); }
		public ITerminalNode FIVE() { return GetToken(Rfc5424Parser.FIVE, 0); }
		public ITerminalNode SIX() { return GetToken(Rfc5424Parser.SIX, 0); }
		public ITerminalNode SEVEN() { return GetToken(Rfc5424Parser.SEVEN, 0); }
		public ITerminalNode EIGHT() { return GetToken(Rfc5424Parser.EIGHT, 0); }
		public ITerminalNode NINE() { return GetToken(Rfc5424Parser.NINE, 0); }
		public ITerminalNode COLON() { return GetToken(Rfc5424Parser.COLON, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(Rfc5424Parser.SEMICOLON, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(Rfc5424Parser.LESS_THAN, 0); }
		public ITerminalNode EQUALS() { return GetToken(Rfc5424Parser.EQUALS, 0); }
		public ITerminalNode GREATER_THAN() { return GetToken(Rfc5424Parser.GREATER_THAN, 0); }
		public ITerminalNode QUESTION() { return GetToken(Rfc5424Parser.QUESTION, 0); }
		public ITerminalNode AT() { return GetToken(Rfc5424Parser.AT, 0); }
		public ITerminalNode CAP_A() { return GetToken(Rfc5424Parser.CAP_A, 0); }
		public ITerminalNode CAP_B() { return GetToken(Rfc5424Parser.CAP_B, 0); }
		public ITerminalNode CAP_C() { return GetToken(Rfc5424Parser.CAP_C, 0); }
		public ITerminalNode CAP_D() { return GetToken(Rfc5424Parser.CAP_D, 0); }
		public ITerminalNode CAP_E() { return GetToken(Rfc5424Parser.CAP_E, 0); }
		public ITerminalNode CAP_F() { return GetToken(Rfc5424Parser.CAP_F, 0); }
		public ITerminalNode CAP_G() { return GetToken(Rfc5424Parser.CAP_G, 0); }
		public ITerminalNode CAP_H() { return GetToken(Rfc5424Parser.CAP_H, 0); }
		public ITerminalNode CAP_I() { return GetToken(Rfc5424Parser.CAP_I, 0); }
		public ITerminalNode CAP_J() { return GetToken(Rfc5424Parser.CAP_J, 0); }
		public ITerminalNode CAP_K() { return GetToken(Rfc5424Parser.CAP_K, 0); }
		public ITerminalNode CAP_L() { return GetToken(Rfc5424Parser.CAP_L, 0); }
		public ITerminalNode CAP_M() { return GetToken(Rfc5424Parser.CAP_M, 0); }
		public ITerminalNode CAP_N() { return GetToken(Rfc5424Parser.CAP_N, 0); }
		public ITerminalNode CAP_O() { return GetToken(Rfc5424Parser.CAP_O, 0); }
		public ITerminalNode CAP_P() { return GetToken(Rfc5424Parser.CAP_P, 0); }
		public ITerminalNode CAP_Q() { return GetToken(Rfc5424Parser.CAP_Q, 0); }
		public ITerminalNode CAP_R() { return GetToken(Rfc5424Parser.CAP_R, 0); }
		public ITerminalNode CAP_S() { return GetToken(Rfc5424Parser.CAP_S, 0); }
		public ITerminalNode CAP_T() { return GetToken(Rfc5424Parser.CAP_T, 0); }
		public ITerminalNode CAP_U() { return GetToken(Rfc5424Parser.CAP_U, 0); }
		public ITerminalNode CAP_V() { return GetToken(Rfc5424Parser.CAP_V, 0); }
		public ITerminalNode CAP_W() { return GetToken(Rfc5424Parser.CAP_W, 0); }
		public ITerminalNode CAP_X() { return GetToken(Rfc5424Parser.CAP_X, 0); }
		public ITerminalNode CAP_Y() { return GetToken(Rfc5424Parser.CAP_Y, 0); }
		public ITerminalNode CAP_Z() { return GetToken(Rfc5424Parser.CAP_Z, 0); }
		public ITerminalNode LEFT_BRACE() { return GetToken(Rfc5424Parser.LEFT_BRACE, 0); }
		public ITerminalNode BACKSLASH() { return GetToken(Rfc5424Parser.BACKSLASH, 0); }
		public ITerminalNode RIGHT_BRACE() { return GetToken(Rfc5424Parser.RIGHT_BRACE, 0); }
		public ITerminalNode CARAT() { return GetToken(Rfc5424Parser.CARAT, 0); }
		public ITerminalNode UNDERSCORE() { return GetToken(Rfc5424Parser.UNDERSCORE, 0); }
		public ITerminalNode ACCENT() { return GetToken(Rfc5424Parser.ACCENT, 0); }
		public ITerminalNode A() { return GetToken(Rfc5424Parser.A, 0); }
		public ITerminalNode B() { return GetToken(Rfc5424Parser.B, 0); }
		public ITerminalNode C() { return GetToken(Rfc5424Parser.C, 0); }
		public ITerminalNode D() { return GetToken(Rfc5424Parser.D, 0); }
		public ITerminalNode E() { return GetToken(Rfc5424Parser.E, 0); }
		public ITerminalNode F() { return GetToken(Rfc5424Parser.F, 0); }
		public ITerminalNode G() { return GetToken(Rfc5424Parser.G, 0); }
		public ITerminalNode H() { return GetToken(Rfc5424Parser.H, 0); }
		public ITerminalNode I() { return GetToken(Rfc5424Parser.I, 0); }
		public ITerminalNode J() { return GetToken(Rfc5424Parser.J, 0); }
		public ITerminalNode K() { return GetToken(Rfc5424Parser.K, 0); }
		public ITerminalNode L() { return GetToken(Rfc5424Parser.L, 0); }
		public ITerminalNode M() { return GetToken(Rfc5424Parser.M, 0); }
		public ITerminalNode N() { return GetToken(Rfc5424Parser.N, 0); }
		public ITerminalNode O() { return GetToken(Rfc5424Parser.O, 0); }
		public ITerminalNode P() { return GetToken(Rfc5424Parser.P, 0); }
		public ITerminalNode Q() { return GetToken(Rfc5424Parser.Q, 0); }
		public ITerminalNode R() { return GetToken(Rfc5424Parser.R, 0); }
		public ITerminalNode S() { return GetToken(Rfc5424Parser.S, 0); }
		public ITerminalNode T() { return GetToken(Rfc5424Parser.T, 0); }
		public ITerminalNode U() { return GetToken(Rfc5424Parser.U, 0); }
		public ITerminalNode V() { return GetToken(Rfc5424Parser.V, 0); }
		public ITerminalNode W() { return GetToken(Rfc5424Parser.W, 0); }
		public ITerminalNode X() { return GetToken(Rfc5424Parser.X, 0); }
		public ITerminalNode Y() { return GetToken(Rfc5424Parser.Y, 0); }
		public ITerminalNode Z() { return GetToken(Rfc5424Parser.Z, 0); }
		public ITerminalNode LEFT_CURLY_BRACE() { return GetToken(Rfc5424Parser.LEFT_CURLY_BRACE, 0); }
		public ITerminalNode PIPE() { return GetToken(Rfc5424Parser.PIPE, 0); }
		public ITerminalNode RIGHT_CURLY_BRACE() { return GetToken(Rfc5424Parser.RIGHT_CURLY_BRACE, 0); }
		public ITerminalNode TILDE() { return GetToken(Rfc5424Parser.TILDE, 0); }
		public ITerminalNode U_007F() { return GetToken(Rfc5424Parser.U_007F, 0); }
		public ITerminalNode U_0080() { return GetToken(Rfc5424Parser.U_0080, 0); }
		public ITerminalNode U_0081() { return GetToken(Rfc5424Parser.U_0081, 0); }
		public ITerminalNode U_0082() { return GetToken(Rfc5424Parser.U_0082, 0); }
		public ITerminalNode U_0083() { return GetToken(Rfc5424Parser.U_0083, 0); }
		public ITerminalNode U_0084() { return GetToken(Rfc5424Parser.U_0084, 0); }
		public ITerminalNode U_0085() { return GetToken(Rfc5424Parser.U_0085, 0); }
		public ITerminalNode U_0086() { return GetToken(Rfc5424Parser.U_0086, 0); }
		public ITerminalNode U_0087() { return GetToken(Rfc5424Parser.U_0087, 0); }
		public ITerminalNode U_0088() { return GetToken(Rfc5424Parser.U_0088, 0); }
		public ITerminalNode U_0089() { return GetToken(Rfc5424Parser.U_0089, 0); }
		public ITerminalNode U_008A() { return GetToken(Rfc5424Parser.U_008A, 0); }
		public ITerminalNode U_008B() { return GetToken(Rfc5424Parser.U_008B, 0); }
		public ITerminalNode U_008C() { return GetToken(Rfc5424Parser.U_008C, 0); }
		public ITerminalNode U_008D() { return GetToken(Rfc5424Parser.U_008D, 0); }
		public ITerminalNode U_008E() { return GetToken(Rfc5424Parser.U_008E, 0); }
		public ITerminalNode U_008F() { return GetToken(Rfc5424Parser.U_008F, 0); }
		public ITerminalNode U_0090() { return GetToken(Rfc5424Parser.U_0090, 0); }
		public ITerminalNode U_0091() { return GetToken(Rfc5424Parser.U_0091, 0); }
		public ITerminalNode U_0092() { return GetToken(Rfc5424Parser.U_0092, 0); }
		public ITerminalNode U_0093() { return GetToken(Rfc5424Parser.U_0093, 0); }
		public ITerminalNode U_0094() { return GetToken(Rfc5424Parser.U_0094, 0); }
		public ITerminalNode U_0095() { return GetToken(Rfc5424Parser.U_0095, 0); }
		public ITerminalNode U_0096() { return GetToken(Rfc5424Parser.U_0096, 0); }
		public ITerminalNode U_0097() { return GetToken(Rfc5424Parser.U_0097, 0); }
		public ITerminalNode U_0098() { return GetToken(Rfc5424Parser.U_0098, 0); }
		public ITerminalNode U_0099() { return GetToken(Rfc5424Parser.U_0099, 0); }
		public ITerminalNode U_009A() { return GetToken(Rfc5424Parser.U_009A, 0); }
		public ITerminalNode U_009B() { return GetToken(Rfc5424Parser.U_009B, 0); }
		public ITerminalNode U_009C() { return GetToken(Rfc5424Parser.U_009C, 0); }
		public ITerminalNode U_009D() { return GetToken(Rfc5424Parser.U_009D, 0); }
		public ITerminalNode U_009E() { return GetToken(Rfc5424Parser.U_009E, 0); }
		public ITerminalNode U_009F() { return GetToken(Rfc5424Parser.U_009F, 0); }
		public ITerminalNode U_00A0() { return GetToken(Rfc5424Parser.U_00A0, 0); }
		public ITerminalNode U_00A1() { return GetToken(Rfc5424Parser.U_00A1, 0); }
		public ITerminalNode U_00A2() { return GetToken(Rfc5424Parser.U_00A2, 0); }
		public ITerminalNode U_00A3() { return GetToken(Rfc5424Parser.U_00A3, 0); }
		public ITerminalNode U_00A4() { return GetToken(Rfc5424Parser.U_00A4, 0); }
		public ITerminalNode U_00A5() { return GetToken(Rfc5424Parser.U_00A5, 0); }
		public ITerminalNode U_00A6() { return GetToken(Rfc5424Parser.U_00A6, 0); }
		public ITerminalNode U_00A7() { return GetToken(Rfc5424Parser.U_00A7, 0); }
		public ITerminalNode U_00A8() { return GetToken(Rfc5424Parser.U_00A8, 0); }
		public ITerminalNode U_00A9() { return GetToken(Rfc5424Parser.U_00A9, 0); }
		public ITerminalNode U_00AA() { return GetToken(Rfc5424Parser.U_00AA, 0); }
		public ITerminalNode U_00AB() { return GetToken(Rfc5424Parser.U_00AB, 0); }
		public ITerminalNode U_00AC() { return GetToken(Rfc5424Parser.U_00AC, 0); }
		public ITerminalNode U_00AD() { return GetToken(Rfc5424Parser.U_00AD, 0); }
		public ITerminalNode U_00AE() { return GetToken(Rfc5424Parser.U_00AE, 0); }
		public ITerminalNode U_00AF() { return GetToken(Rfc5424Parser.U_00AF, 0); }
		public ITerminalNode U_00B0() { return GetToken(Rfc5424Parser.U_00B0, 0); }
		public ITerminalNode U_00B1() { return GetToken(Rfc5424Parser.U_00B1, 0); }
		public ITerminalNode U_00B2() { return GetToken(Rfc5424Parser.U_00B2, 0); }
		public ITerminalNode U_00B3() { return GetToken(Rfc5424Parser.U_00B3, 0); }
		public ITerminalNode U_00B4() { return GetToken(Rfc5424Parser.U_00B4, 0); }
		public ITerminalNode U_00B5() { return GetToken(Rfc5424Parser.U_00B5, 0); }
		public ITerminalNode U_00B6() { return GetToken(Rfc5424Parser.U_00B6, 0); }
		public ITerminalNode U_00B7() { return GetToken(Rfc5424Parser.U_00B7, 0); }
		public ITerminalNode U_00B8() { return GetToken(Rfc5424Parser.U_00B8, 0); }
		public ITerminalNode U_00B9() { return GetToken(Rfc5424Parser.U_00B9, 0); }
		public ITerminalNode U_00BA() { return GetToken(Rfc5424Parser.U_00BA, 0); }
		public ITerminalNode U_00BB() { return GetToken(Rfc5424Parser.U_00BB, 0); }
		public ITerminalNode U_00BC() { return GetToken(Rfc5424Parser.U_00BC, 0); }
		public ITerminalNode U_00BD() { return GetToken(Rfc5424Parser.U_00BD, 0); }
		public ITerminalNode U_00BE() { return GetToken(Rfc5424Parser.U_00BE, 0); }
		public ITerminalNode U_00BF() { return GetToken(Rfc5424Parser.U_00BF, 0); }
		public ITerminalNode U_00C0() { return GetToken(Rfc5424Parser.U_00C0, 0); }
		public ITerminalNode U_00C1() { return GetToken(Rfc5424Parser.U_00C1, 0); }
		public ITerminalNode U_00C2() { return GetToken(Rfc5424Parser.U_00C2, 0); }
		public ITerminalNode U_00C3() { return GetToken(Rfc5424Parser.U_00C3, 0); }
		public ITerminalNode U_00C4() { return GetToken(Rfc5424Parser.U_00C4, 0); }
		public ITerminalNode U_00C5() { return GetToken(Rfc5424Parser.U_00C5, 0); }
		public ITerminalNode U_00C6() { return GetToken(Rfc5424Parser.U_00C6, 0); }
		public ITerminalNode U_00C7() { return GetToken(Rfc5424Parser.U_00C7, 0); }
		public ITerminalNode U_00C8() { return GetToken(Rfc5424Parser.U_00C8, 0); }
		public ITerminalNode U_00C9() { return GetToken(Rfc5424Parser.U_00C9, 0); }
		public ITerminalNode U_00CA() { return GetToken(Rfc5424Parser.U_00CA, 0); }
		public ITerminalNode U_00CB() { return GetToken(Rfc5424Parser.U_00CB, 0); }
		public ITerminalNode U_00CC() { return GetToken(Rfc5424Parser.U_00CC, 0); }
		public ITerminalNode U_00CD() { return GetToken(Rfc5424Parser.U_00CD, 0); }
		public ITerminalNode U_00CE() { return GetToken(Rfc5424Parser.U_00CE, 0); }
		public ITerminalNode U_00CF() { return GetToken(Rfc5424Parser.U_00CF, 0); }
		public ITerminalNode U_00D0() { return GetToken(Rfc5424Parser.U_00D0, 0); }
		public ITerminalNode U_00D1() { return GetToken(Rfc5424Parser.U_00D1, 0); }
		public ITerminalNode U_00D2() { return GetToken(Rfc5424Parser.U_00D2, 0); }
		public ITerminalNode U_00D3() { return GetToken(Rfc5424Parser.U_00D3, 0); }
		public ITerminalNode U_00D4() { return GetToken(Rfc5424Parser.U_00D4, 0); }
		public ITerminalNode U_00D5() { return GetToken(Rfc5424Parser.U_00D5, 0); }
		public ITerminalNode U_00D6() { return GetToken(Rfc5424Parser.U_00D6, 0); }
		public ITerminalNode U_00D7() { return GetToken(Rfc5424Parser.U_00D7, 0); }
		public ITerminalNode U_00D8() { return GetToken(Rfc5424Parser.U_00D8, 0); }
		public ITerminalNode U_00D9() { return GetToken(Rfc5424Parser.U_00D9, 0); }
		public ITerminalNode U_00DA() { return GetToken(Rfc5424Parser.U_00DA, 0); }
		public ITerminalNode U_00DB() { return GetToken(Rfc5424Parser.U_00DB, 0); }
		public ITerminalNode U_00DC() { return GetToken(Rfc5424Parser.U_00DC, 0); }
		public ITerminalNode U_00DD() { return GetToken(Rfc5424Parser.U_00DD, 0); }
		public ITerminalNode U_00DE() { return GetToken(Rfc5424Parser.U_00DE, 0); }
		public ITerminalNode U_00DF() { return GetToken(Rfc5424Parser.U_00DF, 0); }
		public ITerminalNode U_00E0() { return GetToken(Rfc5424Parser.U_00E0, 0); }
		public ITerminalNode U_00E1() { return GetToken(Rfc5424Parser.U_00E1, 0); }
		public ITerminalNode U_00E2() { return GetToken(Rfc5424Parser.U_00E2, 0); }
		public ITerminalNode U_00E3() { return GetToken(Rfc5424Parser.U_00E3, 0); }
		public ITerminalNode U_00E4() { return GetToken(Rfc5424Parser.U_00E4, 0); }
		public ITerminalNode U_00E5() { return GetToken(Rfc5424Parser.U_00E5, 0); }
		public ITerminalNode U_00E6() { return GetToken(Rfc5424Parser.U_00E6, 0); }
		public ITerminalNode U_00E7() { return GetToken(Rfc5424Parser.U_00E7, 0); }
		public ITerminalNode U_00E8() { return GetToken(Rfc5424Parser.U_00E8, 0); }
		public ITerminalNode U_00E9() { return GetToken(Rfc5424Parser.U_00E9, 0); }
		public ITerminalNode U_00EA() { return GetToken(Rfc5424Parser.U_00EA, 0); }
		public ITerminalNode U_00EB() { return GetToken(Rfc5424Parser.U_00EB, 0); }
		public ITerminalNode U_00EC() { return GetToken(Rfc5424Parser.U_00EC, 0); }
		public ITerminalNode U_00ED() { return GetToken(Rfc5424Parser.U_00ED, 0); }
		public ITerminalNode U_00EE() { return GetToken(Rfc5424Parser.U_00EE, 0); }
		public ITerminalNode U_00EF() { return GetToken(Rfc5424Parser.U_00EF, 0); }
		public ITerminalNode U_00F0() { return GetToken(Rfc5424Parser.U_00F0, 0); }
		public ITerminalNode U_00F1() { return GetToken(Rfc5424Parser.U_00F1, 0); }
		public ITerminalNode U_00F2() { return GetToken(Rfc5424Parser.U_00F2, 0); }
		public ITerminalNode U_00F3() { return GetToken(Rfc5424Parser.U_00F3, 0); }
		public ITerminalNode U_00F4() { return GetToken(Rfc5424Parser.U_00F4, 0); }
		public ITerminalNode U_00F5() { return GetToken(Rfc5424Parser.U_00F5, 0); }
		public ITerminalNode U_00F6() { return GetToken(Rfc5424Parser.U_00F6, 0); }
		public ITerminalNode U_00F7() { return GetToken(Rfc5424Parser.U_00F7, 0); }
		public ITerminalNode U_00F8() { return GetToken(Rfc5424Parser.U_00F8, 0); }
		public ITerminalNode U_00F9() { return GetToken(Rfc5424Parser.U_00F9, 0); }
		public ITerminalNode U_00FA() { return GetToken(Rfc5424Parser.U_00FA, 0); }
		public ITerminalNode U_00FB() { return GetToken(Rfc5424Parser.U_00FB, 0); }
		public ITerminalNode U_00FC() { return GetToken(Rfc5424Parser.U_00FC, 0); }
		public ITerminalNode U_00FD() { return GetToken(Rfc5424Parser.U_00FD, 0); }
		public ITerminalNode U_00FE() { return GetToken(Rfc5424Parser.U_00FE, 0); }
		public ITerminalNode U_00FF() { return GetToken(Rfc5424Parser.U_00FF, 0); }
		public OctetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_octet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterOctet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitOctet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOctet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OctetContext octet() {
		OctetContext _localctx = new OctetContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_octet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			_la = _input.La(1);
			if ( !(((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (TAB - 1)) | (1L << (LF - 1)) | (1L << (CR - 1)) | (1L << (SPACE - 1)) | (1L << (EXCLAMATION - 1)) | (1L << (QUOTE - 1)) | (1L << (POUND - 1)) | (1L << (DOLLAR - 1)) | (1L << (PERCENT - 1)) | (1L << (AMPERSAND - 1)) | (1L << (APOSTROPHE - 1)) | (1L << (LEFT_PAREN - 1)) | (1L << (RIGHT_PAREN - 1)) | (1L << (ASTERISK - 1)) | (1L << (PLUS - 1)) | (1L << (COMMA - 1)) | (1L << (DASH - 1)) | (1L << (PERIOD - 1)) | (1L << (SLASH - 1)) | (1L << (ZERO - 1)) | (1L << (ONE - 1)) | (1L << (TWO - 1)) | (1L << (THREE - 1)) | (1L << (FOUR - 1)) | (1L << (FIVE - 1)) | (1L << (SIX - 1)) | (1L << (SEVEN - 1)) | (1L << (EIGHT - 1)) | (1L << (NINE - 1)) | (1L << (COLON - 1)) | (1L << (SEMICOLON - 1)) | (1L << (LESS_THAN - 1)) | (1L << (EQUALS - 1)) | (1L << (GREATER_THAN - 1)) | (1L << (QUESTION - 1)) | (1L << (AT - 1)) | (1L << (CAP_A - 1)) | (1L << (CAP_B - 1)) | (1L << (CAP_C - 1)) | (1L << (CAP_D - 1)) | (1L << (CAP_E - 1)) | (1L << (CAP_F - 1)) | (1L << (CAP_G - 1)) | (1L << (CAP_H - 1)) | (1L << (CAP_I - 1)) | (1L << (CAP_J - 1)) | (1L << (CAP_K - 1)) | (1L << (CAP_L - 1)) | (1L << (CAP_M - 1)) | (1L << (CAP_N - 1)) | (1L << (CAP_O - 1)) | (1L << (CAP_P - 1)) | (1L << (CAP_Q - 1)) | (1L << (CAP_R - 1)) | (1L << (CAP_S - 1)) | (1L << (CAP_T - 1)) | (1L << (CAP_U - 1)) | (1L << (CAP_V - 1)) | (1L << (CAP_W - 1)) | (1L << (CAP_X - 1)) | (1L << (CAP_Y - 1)) | (1L << (CAP_Z - 1)) | (1L << (LEFT_BRACE - 1)) | (1L << (BACKSLASH - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (RIGHT_BRACE - 65)) | (1L << (CARAT - 65)) | (1L << (UNDERSCORE - 65)) | (1L << (ACCENT - 65)) | (1L << (A - 65)) | (1L << (B - 65)) | (1L << (C - 65)) | (1L << (D - 65)) | (1L << (E - 65)) | (1L << (F - 65)) | (1L << (G - 65)) | (1L << (H - 65)) | (1L << (I - 65)) | (1L << (J - 65)) | (1L << (K - 65)) | (1L << (L - 65)) | (1L << (M - 65)) | (1L << (N - 65)) | (1L << (O - 65)) | (1L << (P - 65)) | (1L << (Q - 65)) | (1L << (R - 65)) | (1L << (S - 65)) | (1L << (T - 65)) | (1L << (U - 65)) | (1L << (V - 65)) | (1L << (W - 65)) | (1L << (X - 65)) | (1L << (Y - 65)) | (1L << (Z - 65)) | (1L << (LEFT_CURLY_BRACE - 65)) | (1L << (PIPE - 65)) | (1L << (RIGHT_CURLY_BRACE - 65)) | (1L << (TILDE - 65)) | (1L << (U_0000 - 65)) | (1L << (U_0001 - 65)) | (1L << (U_0002 - 65)) | (1L << (U_0003 - 65)) | (1L << (U_0004 - 65)) | (1L << (U_0005 - 65)) | (1L << (U_0006 - 65)) | (1L << (U_0007 - 65)) | (1L << (U_0008 - 65)) | (1L << (U_000B - 65)) | (1L << (U_000C - 65)) | (1L << (U_000E - 65)) | (1L << (U_000F - 65)) | (1L << (U_0010 - 65)) | (1L << (U_0011 - 65)) | (1L << (U_0012 - 65)) | (1L << (U_0013 - 65)) | (1L << (U_0014 - 65)) | (1L << (U_0015 - 65)) | (1L << (U_0016 - 65)) | (1L << (U_0017 - 65)) | (1L << (U_0018 - 65)) | (1L << (U_0019 - 65)) | (1L << (U_001A - 65)) | (1L << (U_001B - 65)) | (1L << (U_001C - 65)) | (1L << (U_001D - 65)) | (1L << (U_001E - 65)) | (1L << (U_001F - 65)) | (1L << (U_007F - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (U_0080 - 129)) | (1L << (U_0081 - 129)) | (1L << (U_0082 - 129)) | (1L << (U_0083 - 129)) | (1L << (U_0084 - 129)) | (1L << (U_0085 - 129)) | (1L << (U_0086 - 129)) | (1L << (U_0087 - 129)) | (1L << (U_0088 - 129)) | (1L << (U_0089 - 129)) | (1L << (U_008A - 129)) | (1L << (U_008B - 129)) | (1L << (U_008C - 129)) | (1L << (U_008D - 129)) | (1L << (U_008E - 129)) | (1L << (U_008F - 129)) | (1L << (U_0090 - 129)) | (1L << (U_0091 - 129)) | (1L << (U_0092 - 129)) | (1L << (U_0093 - 129)) | (1L << (U_0094 - 129)) | (1L << (U_0095 - 129)) | (1L << (U_0096 - 129)) | (1L << (U_0097 - 129)) | (1L << (U_0098 - 129)) | (1L << (U_0099 - 129)) | (1L << (U_009A - 129)) | (1L << (U_009B - 129)) | (1L << (U_009C - 129)) | (1L << (U_009D - 129)) | (1L << (U_009E - 129)) | (1L << (U_009F - 129)) | (1L << (U_00A0 - 129)) | (1L << (U_00A1 - 129)) | (1L << (U_00A2 - 129)) | (1L << (U_00A3 - 129)) | (1L << (U_00A4 - 129)) | (1L << (U_00A5 - 129)) | (1L << (U_00A6 - 129)) | (1L << (U_00A7 - 129)) | (1L << (U_00A8 - 129)) | (1L << (U_00A9 - 129)) | (1L << (U_00AA - 129)) | (1L << (U_00AB - 129)) | (1L << (U_00AC - 129)) | (1L << (U_00AD - 129)) | (1L << (U_00AE - 129)) | (1L << (U_00AF - 129)) | (1L << (U_00B0 - 129)) | (1L << (U_00B1 - 129)) | (1L << (U_00B2 - 129)) | (1L << (U_00B3 - 129)) | (1L << (U_00B4 - 129)) | (1L << (U_00B5 - 129)) | (1L << (U_00B6 - 129)) | (1L << (U_00B7 - 129)) | (1L << (U_00B8 - 129)) | (1L << (U_00B9 - 129)) | (1L << (U_00BA - 129)) | (1L << (U_00BB - 129)) | (1L << (U_00BC - 129)) | (1L << (U_00BD - 129)) | (1L << (U_00BE - 129)) | (1L << (U_00BF - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (U_00C0 - 193)) | (1L << (U_00C1 - 193)) | (1L << (U_00C2 - 193)) | (1L << (U_00C3 - 193)) | (1L << (U_00C4 - 193)) | (1L << (U_00C5 - 193)) | (1L << (U_00C6 - 193)) | (1L << (U_00C7 - 193)) | (1L << (U_00C8 - 193)) | (1L << (U_00C9 - 193)) | (1L << (U_00CA - 193)) | (1L << (U_00CB - 193)) | (1L << (U_00CC - 193)) | (1L << (U_00CD - 193)) | (1L << (U_00CE - 193)) | (1L << (U_00CF - 193)) | (1L << (U_00D0 - 193)) | (1L << (U_00D1 - 193)) | (1L << (U_00D2 - 193)) | (1L << (U_00D3 - 193)) | (1L << (U_00D4 - 193)) | (1L << (U_00D5 - 193)) | (1L << (U_00D6 - 193)) | (1L << (U_00D7 - 193)) | (1L << (U_00D8 - 193)) | (1L << (U_00D9 - 193)) | (1L << (U_00DA - 193)) | (1L << (U_00DB - 193)) | (1L << (U_00DC - 193)) | (1L << (U_00DD - 193)) | (1L << (U_00DE - 193)) | (1L << (U_00DF - 193)) | (1L << (U_00E0 - 193)) | (1L << (U_00E1 - 193)) | (1L << (U_00E2 - 193)) | (1L << (U_00E3 - 193)) | (1L << (U_00E4 - 193)) | (1L << (U_00E5 - 193)) | (1L << (U_00E6 - 193)) | (1L << (U_00E7 - 193)) | (1L << (U_00E8 - 193)) | (1L << (U_00E9 - 193)) | (1L << (U_00EA - 193)) | (1L << (U_00EB - 193)) | (1L << (U_00EC - 193)) | (1L << (U_00ED - 193)) | (1L << (U_00EE - 193)) | (1L << (U_00EF - 193)) | (1L << (U_00F0 - 193)) | (1L << (U_00F1 - 193)) | (1L << (U_00F2 - 193)) | (1L << (U_00F3 - 193)) | (1L << (U_00F4 - 193)) | (1L << (U_00F5 - 193)) | (1L << (U_00F6 - 193)) | (1L << (U_00F7 - 193)) | (1L << (U_00F8 - 193)) | (1L << (U_00F9 - 193)) | (1L << (U_00FA - 193)) | (1L << (U_00FB - 193)) | (1L << (U_00FC - 193)) | (1L << (U_00FD - 193)) | (1L << (U_00FE - 193)) | (1L << (U_00FF - 193)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpContext : ParserRuleContext {
		public ITerminalNode SPACE() { return GetToken(Rfc5424Parser.SPACE, 0); }
		public SpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterSp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitSp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpContext sp() {
		SpContext _localctx = new SpContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_sp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305; Match(SPACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintusasciiContext : ParserRuleContext {
		public ITerminalNode EXCLAMATION() { return GetToken(Rfc5424Parser.EXCLAMATION, 0); }
		public ITerminalNode QUOTE() { return GetToken(Rfc5424Parser.QUOTE, 0); }
		public ITerminalNode POUND() { return GetToken(Rfc5424Parser.POUND, 0); }
		public ITerminalNode DOLLAR() { return GetToken(Rfc5424Parser.DOLLAR, 0); }
		public ITerminalNode PERCENT() { return GetToken(Rfc5424Parser.PERCENT, 0); }
		public ITerminalNode AMPERSAND() { return GetToken(Rfc5424Parser.AMPERSAND, 0); }
		public ITerminalNode APOSTROPHE() { return GetToken(Rfc5424Parser.APOSTROPHE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(Rfc5424Parser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(Rfc5424Parser.RIGHT_PAREN, 0); }
		public ITerminalNode ASTERISK() { return GetToken(Rfc5424Parser.ASTERISK, 0); }
		public ITerminalNode PLUS() { return GetToken(Rfc5424Parser.PLUS, 0); }
		public ITerminalNode COMMA() { return GetToken(Rfc5424Parser.COMMA, 0); }
		public ITerminalNode DASH() { return GetToken(Rfc5424Parser.DASH, 0); }
		public ITerminalNode PERIOD() { return GetToken(Rfc5424Parser.PERIOD, 0); }
		public ITerminalNode SLASH() { return GetToken(Rfc5424Parser.SLASH, 0); }
		public ITerminalNode ZERO() { return GetToken(Rfc5424Parser.ZERO, 0); }
		public ITerminalNode ONE() { return GetToken(Rfc5424Parser.ONE, 0); }
		public ITerminalNode TWO() { return GetToken(Rfc5424Parser.TWO, 0); }
		public ITerminalNode THREE() { return GetToken(Rfc5424Parser.THREE, 0); }
		public ITerminalNode FOUR() { return GetToken(Rfc5424Parser.FOUR, 0); }
		public ITerminalNode FIVE() { return GetToken(Rfc5424Parser.FIVE, 0); }
		public ITerminalNode SIX() { return GetToken(Rfc5424Parser.SIX, 0); }
		public ITerminalNode SEVEN() { return GetToken(Rfc5424Parser.SEVEN, 0); }
		public ITerminalNode EIGHT() { return GetToken(Rfc5424Parser.EIGHT, 0); }
		public ITerminalNode NINE() { return GetToken(Rfc5424Parser.NINE, 0); }
		public ITerminalNode COLON() { return GetToken(Rfc5424Parser.COLON, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(Rfc5424Parser.SEMICOLON, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(Rfc5424Parser.LESS_THAN, 0); }
		public ITerminalNode EQUALS() { return GetToken(Rfc5424Parser.EQUALS, 0); }
		public ITerminalNode GREATER_THAN() { return GetToken(Rfc5424Parser.GREATER_THAN, 0); }
		public ITerminalNode QUESTION() { return GetToken(Rfc5424Parser.QUESTION, 0); }
		public ITerminalNode AT() { return GetToken(Rfc5424Parser.AT, 0); }
		public ITerminalNode CAP_A() { return GetToken(Rfc5424Parser.CAP_A, 0); }
		public ITerminalNode CAP_B() { return GetToken(Rfc5424Parser.CAP_B, 0); }
		public ITerminalNode CAP_C() { return GetToken(Rfc5424Parser.CAP_C, 0); }
		public ITerminalNode CAP_D() { return GetToken(Rfc5424Parser.CAP_D, 0); }
		public ITerminalNode CAP_E() { return GetToken(Rfc5424Parser.CAP_E, 0); }
		public ITerminalNode CAP_F() { return GetToken(Rfc5424Parser.CAP_F, 0); }
		public ITerminalNode CAP_G() { return GetToken(Rfc5424Parser.CAP_G, 0); }
		public ITerminalNode CAP_H() { return GetToken(Rfc5424Parser.CAP_H, 0); }
		public ITerminalNode CAP_I() { return GetToken(Rfc5424Parser.CAP_I, 0); }
		public ITerminalNode CAP_J() { return GetToken(Rfc5424Parser.CAP_J, 0); }
		public ITerminalNode CAP_K() { return GetToken(Rfc5424Parser.CAP_K, 0); }
		public ITerminalNode CAP_L() { return GetToken(Rfc5424Parser.CAP_L, 0); }
		public ITerminalNode CAP_M() { return GetToken(Rfc5424Parser.CAP_M, 0); }
		public ITerminalNode CAP_N() { return GetToken(Rfc5424Parser.CAP_N, 0); }
		public ITerminalNode CAP_O() { return GetToken(Rfc5424Parser.CAP_O, 0); }
		public ITerminalNode CAP_P() { return GetToken(Rfc5424Parser.CAP_P, 0); }
		public ITerminalNode CAP_Q() { return GetToken(Rfc5424Parser.CAP_Q, 0); }
		public ITerminalNode CAP_R() { return GetToken(Rfc5424Parser.CAP_R, 0); }
		public ITerminalNode CAP_S() { return GetToken(Rfc5424Parser.CAP_S, 0); }
		public ITerminalNode CAP_T() { return GetToken(Rfc5424Parser.CAP_T, 0); }
		public ITerminalNode CAP_U() { return GetToken(Rfc5424Parser.CAP_U, 0); }
		public ITerminalNode CAP_V() { return GetToken(Rfc5424Parser.CAP_V, 0); }
		public ITerminalNode CAP_W() { return GetToken(Rfc5424Parser.CAP_W, 0); }
		public ITerminalNode CAP_X() { return GetToken(Rfc5424Parser.CAP_X, 0); }
		public ITerminalNode CAP_Y() { return GetToken(Rfc5424Parser.CAP_Y, 0); }
		public ITerminalNode CAP_Z() { return GetToken(Rfc5424Parser.CAP_Z, 0); }
		public ITerminalNode LEFT_BRACE() { return GetToken(Rfc5424Parser.LEFT_BRACE, 0); }
		public ITerminalNode BACKSLASH() { return GetToken(Rfc5424Parser.BACKSLASH, 0); }
		public ITerminalNode RIGHT_BRACE() { return GetToken(Rfc5424Parser.RIGHT_BRACE, 0); }
		public ITerminalNode CARAT() { return GetToken(Rfc5424Parser.CARAT, 0); }
		public ITerminalNode UNDERSCORE() { return GetToken(Rfc5424Parser.UNDERSCORE, 0); }
		public ITerminalNode ACCENT() { return GetToken(Rfc5424Parser.ACCENT, 0); }
		public ITerminalNode A() { return GetToken(Rfc5424Parser.A, 0); }
		public ITerminalNode B() { return GetToken(Rfc5424Parser.B, 0); }
		public ITerminalNode C() { return GetToken(Rfc5424Parser.C, 0); }
		public ITerminalNode D() { return GetToken(Rfc5424Parser.D, 0); }
		public ITerminalNode E() { return GetToken(Rfc5424Parser.E, 0); }
		public ITerminalNode F() { return GetToken(Rfc5424Parser.F, 0); }
		public ITerminalNode G() { return GetToken(Rfc5424Parser.G, 0); }
		public ITerminalNode H() { return GetToken(Rfc5424Parser.H, 0); }
		public ITerminalNode I() { return GetToken(Rfc5424Parser.I, 0); }
		public ITerminalNode J() { return GetToken(Rfc5424Parser.J, 0); }
		public ITerminalNode K() { return GetToken(Rfc5424Parser.K, 0); }
		public ITerminalNode L() { return GetToken(Rfc5424Parser.L, 0); }
		public ITerminalNode M() { return GetToken(Rfc5424Parser.M, 0); }
		public ITerminalNode N() { return GetToken(Rfc5424Parser.N, 0); }
		public ITerminalNode O() { return GetToken(Rfc5424Parser.O, 0); }
		public ITerminalNode P() { return GetToken(Rfc5424Parser.P, 0); }
		public ITerminalNode Q() { return GetToken(Rfc5424Parser.Q, 0); }
		public ITerminalNode R() { return GetToken(Rfc5424Parser.R, 0); }
		public ITerminalNode S() { return GetToken(Rfc5424Parser.S, 0); }
		public ITerminalNode T() { return GetToken(Rfc5424Parser.T, 0); }
		public ITerminalNode U() { return GetToken(Rfc5424Parser.U, 0); }
		public ITerminalNode V() { return GetToken(Rfc5424Parser.V, 0); }
		public ITerminalNode W() { return GetToken(Rfc5424Parser.W, 0); }
		public ITerminalNode X() { return GetToken(Rfc5424Parser.X, 0); }
		public ITerminalNode Y() { return GetToken(Rfc5424Parser.Y, 0); }
		public ITerminalNode Z() { return GetToken(Rfc5424Parser.Z, 0); }
		public ITerminalNode LEFT_CURLY_BRACE() { return GetToken(Rfc5424Parser.LEFT_CURLY_BRACE, 0); }
		public ITerminalNode PIPE() { return GetToken(Rfc5424Parser.PIPE, 0); }
		public ITerminalNode RIGHT_CURLY_BRACE() { return GetToken(Rfc5424Parser.RIGHT_CURLY_BRACE, 0); }
		public ITerminalNode TILDE() { return GetToken(Rfc5424Parser.TILDE, 0); }
		public PrintusasciiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printusascii; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterPrintusascii(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitPrintusascii(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintusascii(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintusasciiContext printusascii() {
		PrintusasciiContext _localctx = new PrintusasciiContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_printusascii);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATION) | (1L << QUOTE) | (1L << POUND) | (1L << DOLLAR) | (1L << PERCENT) | (1L << AMPERSAND) | (1L << APOSTROPHE) | (1L << LEFT_PAREN) | (1L << RIGHT_PAREN) | (1L << ASTERISK) | (1L << PLUS) | (1L << COMMA) | (1L << DASH) | (1L << PERIOD) | (1L << SLASH) | (1L << ZERO) | (1L << ONE) | (1L << TWO) | (1L << THREE) | (1L << FOUR) | (1L << FIVE) | (1L << SIX) | (1L << SEVEN) | (1L << EIGHT) | (1L << NINE) | (1L << COLON) | (1L << SEMICOLON) | (1L << LESS_THAN) | (1L << EQUALS) | (1L << GREATER_THAN) | (1L << QUESTION) | (1L << AT) | (1L << CAP_A) | (1L << CAP_B) | (1L << CAP_C) | (1L << CAP_D) | (1L << CAP_E) | (1L << CAP_F) | (1L << CAP_G) | (1L << CAP_H) | (1L << CAP_I) | (1L << CAP_J) | (1L << CAP_K) | (1L << CAP_L) | (1L << CAP_M) | (1L << CAP_N) | (1L << CAP_O) | (1L << CAP_P) | (1L << CAP_Q) | (1L << CAP_R) | (1L << CAP_S) | (1L << CAP_T) | (1L << CAP_U) | (1L << CAP_V) | (1L << CAP_W) | (1L << CAP_X) | (1L << CAP_Y) | (1L << CAP_Z) | (1L << LEFT_BRACE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BACKSLASH - 64)) | (1L << (RIGHT_BRACE - 64)) | (1L << (CARAT - 64)) | (1L << (UNDERSCORE - 64)) | (1L << (ACCENT - 64)) | (1L << (A - 64)) | (1L << (B - 64)) | (1L << (C - 64)) | (1L << (D - 64)) | (1L << (E - 64)) | (1L << (F - 64)) | (1L << (G - 64)) | (1L << (H - 64)) | (1L << (I - 64)) | (1L << (J - 64)) | (1L << (K - 64)) | (1L << (L - 64)) | (1L << (M - 64)) | (1L << (N - 64)) | (1L << (O - 64)) | (1L << (P - 64)) | (1L << (Q - 64)) | (1L << (R - 64)) | (1L << (S - 64)) | (1L << (T - 64)) | (1L << (U - 64)) | (1L << (V - 64)) | (1L << (W - 64)) | (1L << (X - 64)) | (1L << (Y - 64)) | (1L << (Z - 64)) | (1L << (LEFT_CURLY_BRACE - 64)) | (1L << (PIPE - 64)) | (1L << (RIGHT_CURLY_BRACE - 64)) | (1L << (TILDE - 64)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintusasciinospecialsContext : ParserRuleContext {
		public ITerminalNode EXCLAMATION() { return GetToken(Rfc5424Parser.EXCLAMATION, 0); }
		public ITerminalNode POUND() { return GetToken(Rfc5424Parser.POUND, 0); }
		public ITerminalNode DOLLAR() { return GetToken(Rfc5424Parser.DOLLAR, 0); }
		public ITerminalNode PERCENT() { return GetToken(Rfc5424Parser.PERCENT, 0); }
		public ITerminalNode AMPERSAND() { return GetToken(Rfc5424Parser.AMPERSAND, 0); }
		public ITerminalNode APOSTROPHE() { return GetToken(Rfc5424Parser.APOSTROPHE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(Rfc5424Parser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(Rfc5424Parser.RIGHT_PAREN, 0); }
		public ITerminalNode ASTERISK() { return GetToken(Rfc5424Parser.ASTERISK, 0); }
		public ITerminalNode PLUS() { return GetToken(Rfc5424Parser.PLUS, 0); }
		public ITerminalNode COMMA() { return GetToken(Rfc5424Parser.COMMA, 0); }
		public ITerminalNode DASH() { return GetToken(Rfc5424Parser.DASH, 0); }
		public ITerminalNode PERIOD() { return GetToken(Rfc5424Parser.PERIOD, 0); }
		public ITerminalNode SLASH() { return GetToken(Rfc5424Parser.SLASH, 0); }
		public ITerminalNode ZERO() { return GetToken(Rfc5424Parser.ZERO, 0); }
		public ITerminalNode ONE() { return GetToken(Rfc5424Parser.ONE, 0); }
		public ITerminalNode TWO() { return GetToken(Rfc5424Parser.TWO, 0); }
		public ITerminalNode THREE() { return GetToken(Rfc5424Parser.THREE, 0); }
		public ITerminalNode FOUR() { return GetToken(Rfc5424Parser.FOUR, 0); }
		public ITerminalNode FIVE() { return GetToken(Rfc5424Parser.FIVE, 0); }
		public ITerminalNode SIX() { return GetToken(Rfc5424Parser.SIX, 0); }
		public ITerminalNode SEVEN() { return GetToken(Rfc5424Parser.SEVEN, 0); }
		public ITerminalNode EIGHT() { return GetToken(Rfc5424Parser.EIGHT, 0); }
		public ITerminalNode NINE() { return GetToken(Rfc5424Parser.NINE, 0); }
		public ITerminalNode COLON() { return GetToken(Rfc5424Parser.COLON, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(Rfc5424Parser.SEMICOLON, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(Rfc5424Parser.LESS_THAN, 0); }
		public ITerminalNode GREATER_THAN() { return GetToken(Rfc5424Parser.GREATER_THAN, 0); }
		public ITerminalNode QUESTION() { return GetToken(Rfc5424Parser.QUESTION, 0); }
		public ITerminalNode AT() { return GetToken(Rfc5424Parser.AT, 0); }
		public ITerminalNode CAP_A() { return GetToken(Rfc5424Parser.CAP_A, 0); }
		public ITerminalNode CAP_B() { return GetToken(Rfc5424Parser.CAP_B, 0); }
		public ITerminalNode CAP_C() { return GetToken(Rfc5424Parser.CAP_C, 0); }
		public ITerminalNode CAP_D() { return GetToken(Rfc5424Parser.CAP_D, 0); }
		public ITerminalNode CAP_E() { return GetToken(Rfc5424Parser.CAP_E, 0); }
		public ITerminalNode CAP_F() { return GetToken(Rfc5424Parser.CAP_F, 0); }
		public ITerminalNode CAP_G() { return GetToken(Rfc5424Parser.CAP_G, 0); }
		public ITerminalNode CAP_H() { return GetToken(Rfc5424Parser.CAP_H, 0); }
		public ITerminalNode CAP_I() { return GetToken(Rfc5424Parser.CAP_I, 0); }
		public ITerminalNode CAP_J() { return GetToken(Rfc5424Parser.CAP_J, 0); }
		public ITerminalNode CAP_K() { return GetToken(Rfc5424Parser.CAP_K, 0); }
		public ITerminalNode CAP_L() { return GetToken(Rfc5424Parser.CAP_L, 0); }
		public ITerminalNode CAP_M() { return GetToken(Rfc5424Parser.CAP_M, 0); }
		public ITerminalNode CAP_N() { return GetToken(Rfc5424Parser.CAP_N, 0); }
		public ITerminalNode CAP_O() { return GetToken(Rfc5424Parser.CAP_O, 0); }
		public ITerminalNode CAP_P() { return GetToken(Rfc5424Parser.CAP_P, 0); }
		public ITerminalNode CAP_Q() { return GetToken(Rfc5424Parser.CAP_Q, 0); }
		public ITerminalNode CAP_R() { return GetToken(Rfc5424Parser.CAP_R, 0); }
		public ITerminalNode CAP_S() { return GetToken(Rfc5424Parser.CAP_S, 0); }
		public ITerminalNode CAP_T() { return GetToken(Rfc5424Parser.CAP_T, 0); }
		public ITerminalNode CAP_U() { return GetToken(Rfc5424Parser.CAP_U, 0); }
		public ITerminalNode CAP_V() { return GetToken(Rfc5424Parser.CAP_V, 0); }
		public ITerminalNode CAP_W() { return GetToken(Rfc5424Parser.CAP_W, 0); }
		public ITerminalNode CAP_X() { return GetToken(Rfc5424Parser.CAP_X, 0); }
		public ITerminalNode CAP_Y() { return GetToken(Rfc5424Parser.CAP_Y, 0); }
		public ITerminalNode CAP_Z() { return GetToken(Rfc5424Parser.CAP_Z, 0); }
		public ITerminalNode LEFT_BRACE() { return GetToken(Rfc5424Parser.LEFT_BRACE, 0); }
		public ITerminalNode BACKSLASH() { return GetToken(Rfc5424Parser.BACKSLASH, 0); }
		public ITerminalNode CARAT() { return GetToken(Rfc5424Parser.CARAT, 0); }
		public ITerminalNode UNDERSCORE() { return GetToken(Rfc5424Parser.UNDERSCORE, 0); }
		public ITerminalNode ACCENT() { return GetToken(Rfc5424Parser.ACCENT, 0); }
		public ITerminalNode A() { return GetToken(Rfc5424Parser.A, 0); }
		public ITerminalNode B() { return GetToken(Rfc5424Parser.B, 0); }
		public ITerminalNode C() { return GetToken(Rfc5424Parser.C, 0); }
		public ITerminalNode D() { return GetToken(Rfc5424Parser.D, 0); }
		public ITerminalNode E() { return GetToken(Rfc5424Parser.E, 0); }
		public ITerminalNode F() { return GetToken(Rfc5424Parser.F, 0); }
		public ITerminalNode G() { return GetToken(Rfc5424Parser.G, 0); }
		public ITerminalNode H() { return GetToken(Rfc5424Parser.H, 0); }
		public ITerminalNode I() { return GetToken(Rfc5424Parser.I, 0); }
		public ITerminalNode J() { return GetToken(Rfc5424Parser.J, 0); }
		public ITerminalNode K() { return GetToken(Rfc5424Parser.K, 0); }
		public ITerminalNode L() { return GetToken(Rfc5424Parser.L, 0); }
		public ITerminalNode M() { return GetToken(Rfc5424Parser.M, 0); }
		public ITerminalNode N() { return GetToken(Rfc5424Parser.N, 0); }
		public ITerminalNode O() { return GetToken(Rfc5424Parser.O, 0); }
		public ITerminalNode P() { return GetToken(Rfc5424Parser.P, 0); }
		public ITerminalNode Q() { return GetToken(Rfc5424Parser.Q, 0); }
		public ITerminalNode R() { return GetToken(Rfc5424Parser.R, 0); }
		public ITerminalNode S() { return GetToken(Rfc5424Parser.S, 0); }
		public ITerminalNode T() { return GetToken(Rfc5424Parser.T, 0); }
		public ITerminalNode U() { return GetToken(Rfc5424Parser.U, 0); }
		public ITerminalNode V() { return GetToken(Rfc5424Parser.V, 0); }
		public ITerminalNode W() { return GetToken(Rfc5424Parser.W, 0); }
		public ITerminalNode X() { return GetToken(Rfc5424Parser.X, 0); }
		public ITerminalNode Y() { return GetToken(Rfc5424Parser.Y, 0); }
		public ITerminalNode Z() { return GetToken(Rfc5424Parser.Z, 0); }
		public ITerminalNode LEFT_CURLY_BRACE() { return GetToken(Rfc5424Parser.LEFT_CURLY_BRACE, 0); }
		public ITerminalNode PIPE() { return GetToken(Rfc5424Parser.PIPE, 0); }
		public ITerminalNode RIGHT_CURLY_BRACE() { return GetToken(Rfc5424Parser.RIGHT_CURLY_BRACE, 0); }
		public ITerminalNode TILDE() { return GetToken(Rfc5424Parser.TILDE, 0); }
		public PrintusasciinospecialsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printusasciinospecials; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterPrintusasciinospecials(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitPrintusasciinospecials(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintusasciinospecials(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintusasciinospecialsContext printusasciinospecials() {
		PrintusasciinospecialsContext _localctx = new PrintusasciinospecialsContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_printusasciinospecials);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATION) | (1L << POUND) | (1L << DOLLAR) | (1L << PERCENT) | (1L << AMPERSAND) | (1L << APOSTROPHE) | (1L << LEFT_PAREN) | (1L << RIGHT_PAREN) | (1L << ASTERISK) | (1L << PLUS) | (1L << COMMA) | (1L << DASH) | (1L << PERIOD) | (1L << SLASH) | (1L << ZERO) | (1L << ONE) | (1L << TWO) | (1L << THREE) | (1L << FOUR) | (1L << FIVE) | (1L << SIX) | (1L << SEVEN) | (1L << EIGHT) | (1L << NINE) | (1L << COLON) | (1L << SEMICOLON) | (1L << LESS_THAN) | (1L << GREATER_THAN) | (1L << QUESTION) | (1L << AT) | (1L << CAP_A) | (1L << CAP_B) | (1L << CAP_C) | (1L << CAP_D) | (1L << CAP_E) | (1L << CAP_F) | (1L << CAP_G) | (1L << CAP_H) | (1L << CAP_I) | (1L << CAP_J) | (1L << CAP_K) | (1L << CAP_L) | (1L << CAP_M) | (1L << CAP_N) | (1L << CAP_O) | (1L << CAP_P) | (1L << CAP_Q) | (1L << CAP_R) | (1L << CAP_S) | (1L << CAP_T) | (1L << CAP_U) | (1L << CAP_V) | (1L << CAP_W) | (1L << CAP_X) | (1L << CAP_Y) | (1L << CAP_Z) | (1L << LEFT_BRACE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (BACKSLASH - 64)) | (1L << (CARAT - 64)) | (1L << (UNDERSCORE - 64)) | (1L << (ACCENT - 64)) | (1L << (A - 64)) | (1L << (B - 64)) | (1L << (C - 64)) | (1L << (D - 64)) | (1L << (E - 64)) | (1L << (F - 64)) | (1L << (G - 64)) | (1L << (H - 64)) | (1L << (I - 64)) | (1L << (J - 64)) | (1L << (K - 64)) | (1L << (L - 64)) | (1L << (M - 64)) | (1L << (N - 64)) | (1L << (O - 64)) | (1L << (P - 64)) | (1L << (Q - 64)) | (1L << (R - 64)) | (1L << (S - 64)) | (1L << (T - 64)) | (1L << (U - 64)) | (1L << (V - 64)) | (1L << (W - 64)) | (1L << (X - 64)) | (1L << (Y - 64)) | (1L << (Z - 64)) | (1L << (LEFT_CURLY_BRACE - 64)) | (1L << (PIPE - 64)) | (1L << (RIGHT_CURLY_BRACE - 64)) | (1L << (TILDE - 64)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nonzero_digitContext : ParserRuleContext {
		public ITerminalNode ONE() { return GetToken(Rfc5424Parser.ONE, 0); }
		public ITerminalNode TWO() { return GetToken(Rfc5424Parser.TWO, 0); }
		public ITerminalNode THREE() { return GetToken(Rfc5424Parser.THREE, 0); }
		public ITerminalNode FOUR() { return GetToken(Rfc5424Parser.FOUR, 0); }
		public ITerminalNode FIVE() { return GetToken(Rfc5424Parser.FIVE, 0); }
		public ITerminalNode SIX() { return GetToken(Rfc5424Parser.SIX, 0); }
		public ITerminalNode SEVEN() { return GetToken(Rfc5424Parser.SEVEN, 0); }
		public ITerminalNode EIGHT() { return GetToken(Rfc5424Parser.EIGHT, 0); }
		public ITerminalNode NINE() { return GetToken(Rfc5424Parser.NINE, 0); }
		public Nonzero_digitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonzero_digit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterNonzero_digit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitNonzero_digit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonzero_digit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nonzero_digitContext nonzero_digit() {
		Nonzero_digitContext _localctx = new Nonzero_digitContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_nonzero_digit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ONE) | (1L << TWO) | (1L << THREE) | (1L << FOUR) | (1L << FIVE) | (1L << SIX) | (1L << SEVEN) | (1L << EIGHT) | (1L << NINE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DigitContext : ParserRuleContext {
		public DigitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_digit; } }
	 
		public DigitContext() { }
		public virtual void CopyFrom(DigitContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ZeroDigitContext : DigitContext {
		public ITerminalNode ZERO() { return GetToken(Rfc5424Parser.ZERO, 0); }
		public ZeroDigitContext(DigitContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterZeroDigit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitZeroDigit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZeroDigit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NonZeroDigitContext : DigitContext {
		public Nonzero_digitContext nonzero_digit() {
			return GetRuleContext<Nonzero_digitContext>(0);
		}
		public NonZeroDigitContext(DigitContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterNonZeroDigit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitNonZeroDigit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonZeroDigit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DigitContext digit() {
		DigitContext _localctx = new DigitContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_digit);
		try {
			State = 315;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ZERO:
				_localctx = new ZeroDigitContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 313; Match(ZERO);
				}
				break;
			case ONE:
			case TWO:
			case THREE:
			case FOUR:
			case FIVE:
			case SIX:
			case SEVEN:
			case EIGHT:
			case NINE:
				_localctx = new NonZeroDigitContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 314; nonzero_digit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NilvalueContext : ParserRuleContext {
		public ITerminalNode DASH() { return GetToken(Rfc5424Parser.DASH, 0); }
		public NilvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nilvalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.EnterNilvalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRfc5424Listener typedListener = listener as IRfc5424Listener;
			if (typedListener != null) typedListener.ExitNilvalue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRfc5424Visitor<TResult> typedVisitor = visitor as IRfc5424Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNilvalue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NilvalueContext nilvalue() {
		NilvalueContext _localctx = new NilvalueContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_nilvalue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; Match(DASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x102\x142\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2Y\n\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x5\x3\x5\x5\x5n\n\x5\x3\x5\x3\x5\x3\x5\x5\x5s\n\x5\x3\x6\x3\x6\x5"+
		"\x6w\n\x6\x3\x6\x3\x6\x3\x6\x5\x6|\n\x6\x3\a\x3\a\a\a\x80\n\a\f\a\xE\a"+
		"\x83\v\a\x5\a\x85\n\a\x3\b\x3\b\a\b\x89\n\b\f\b\xE\b\x8C\v\b\x5\b\x8E"+
		"\n\b\x3\t\x3\t\a\t\x92\n\t\f\t\xE\t\x95\v\t\x5\t\x97\n\t\x3\n\x3\n\a\n"+
		"\x9B\n\n\f\n\xE\n\x9E\v\n\x5\n\xA0\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xA7"+
		"\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE"+
		"\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x5\x11\xC3\n\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13"+
		"\x3\x13\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x5\x15\xD1\n\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\xE5\n\x15"+
		"\x3\x16\x3\x16\x5\x16\xE9\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x6\x18\xF6\n\x18\r\x18\xE\x18"+
		"\xF7\x5\x18\xFA\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x100\n\x19\f\x19"+
		"\xE\x19\x103\v\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3"+
		"\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\a\x1D\x112\n\x1D\f\x1D\xE\x1D"+
		"\x115\v\x1D\x3\x1E\a\x1E\x118\n\x1E\f\x1E\xE\x1E\x11B\v\x1E\x3\x1F\x3"+
		"\x1F\x5\x1F\x11F\n\x1F\x3 \a \x122\n \f \xE \x125\v \x3!\x3!\x3!\x3\""+
		"\x3\"\x3#\a#\x12D\n#\f#\xE#\x130\v#\x3$\x3$\x3%\x3%\x3&\x3&\x3\'\x3\'"+
		"\x3(\x3(\x3)\x3)\x5)\x13E\n)\x3*\x3*\x3*\x2\x2\x2+\x2\x2\x4\x2\x6\x2\b"+
		"\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2"+
		":\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2\x2\t\x4"+
		"\x2\x11\x11\x13\x13\x4\x2\b\b\x42\x43\x5\x2\xBE\xBE\xC2\xC2\xF2\xF2\x3"+
		"\x2\x3\x102\x3\x2\a\x64\x6\x2\a\a\t\"$\x42\x44\x64\x3\x2\x17\x1F\x137"+
		"\x2T\x3\x2\x2\x2\x4Z\x3\x2\x2\x2\x6g\x3\x2\x2\x2\bk\x3\x2\x2\x2\nt\x3"+
		"\x2\x2\x2\f\x84\x3\x2\x2\x2\xE\x8D\x3\x2\x2\x2\x10\x96\x3\x2\x2\x2\x12"+
		"\x9F\x3\x2\x2\x2\x14\xA6\x3\x2\x2\x2\x16\xA8\x3\x2\x2\x2\x18\xAE\x3\x2"+
		"\x2\x2\x1A\xB3\x3\x2\x2\x2\x1C\xB6\x3\x2\x2\x2\x1E\xB9\x3\x2\x2\x2 \xBC"+
		"\x3\x2\x2\x2\"\xC4\x3\x2\x2\x2$\xC7\x3\x2\x2\x2&\xCA\x3\x2\x2\x2(\xCD"+
		"\x3\x2\x2\x2*\xE8\x3\x2\x2\x2,\xEA\x3\x2\x2\x2.\xF9\x3\x2\x2\x2\x30\xFB"+
		"\x3\x2\x2\x2\x32\x104\x3\x2\x2\x2\x34\x10A\x3\x2\x2\x2\x36\x10C\x3\x2"+
		"\x2\x2\x38\x113\x3\x2\x2\x2:\x119\x3\x2\x2\x2<\x11E\x3\x2\x2\x2>\x123"+
		"\x3\x2\x2\x2@\x126\x3\x2\x2\x2\x42\x129\x3\x2\x2\x2\x44\x12E\x3\x2\x2"+
		"\x2\x46\x131\x3\x2\x2\x2H\x133\x3\x2\x2\x2J\x135\x3\x2\x2\x2L\x137\x3"+
		"\x2\x2\x2N\x139\x3\x2\x2\x2P\x13D\x3\x2\x2\x2R\x13F\x3\x2\x2\x2TU\x5\x4"+
		"\x3\x2UV\x5H%\x2VX\x5.\x18\x2WY\x5<\x1F\x2XW\x3\x2\x2\x2XY\x3\x2\x2\x2"+
		"Y\x3\x3\x2\x2\x2Z[\x5\x6\x4\x2[\\\x5\n\x6\x2\\]\x5H%\x2]^\x5\x14\v\x2"+
		"^_\x5H%\x2_`\x5\f\a\x2`\x61\x5H%\x2\x61\x62\x5\xE\b\x2\x62\x63\x5H%\x2"+
		"\x63\x64\x5\x10\t\x2\x64\x65\x5H%\x2\x65\x66\x5\x12\n\x2\x66\x5\x3\x2"+
		"\x2\x2gh\a\"\x2\x2hi\x5\b\x5\x2ij\a$\x2\x2j\a\x3\x2\x2\x2kr\x5P)\x2ln"+
		"\x5P)\x2ml\x3\x2\x2\x2mn\x3\x2\x2\x2ns\x3\x2\x2\x2op\x5P)\x2pq\x5P)\x2"+
		"qs\x3\x2\x2\x2rm\x3\x2\x2\x2ro\x3\x2\x2\x2s\t\x3\x2\x2\x2t{\x5N(\x2uw"+
		"\x5P)\x2vu\x3\x2\x2\x2vw\x3\x2\x2\x2w|\x3\x2\x2\x2xy\x5P)\x2yz\x5P)\x2"+
		"z|\x3\x2\x2\x2{v\x3\x2\x2\x2{x\x3\x2\x2\x2|\v\x3\x2\x2\x2}\x85\x5R*\x2"+
		"~\x80\x5J&\x2\x7F~\x3\x2\x2\x2\x80\x83\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2"+
		"\x81\x82\x3\x2\x2\x2\x82\x85\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2\x84}\x3\x2"+
		"\x2\x2\x84\x81\x3\x2\x2\x2\x85\r\x3\x2\x2\x2\x86\x8E\x5R*\x2\x87\x89\x5"+
		"J&\x2\x88\x87\x3\x2\x2\x2\x89\x8C\x3\x2\x2\x2\x8A\x88\x3\x2\x2\x2\x8A"+
		"\x8B\x3\x2\x2\x2\x8B\x8E\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8D\x86\x3\x2"+
		"\x2\x2\x8D\x8A\x3\x2\x2\x2\x8E\xF\x3\x2\x2\x2\x8F\x97\x5R*\x2\x90\x92"+
		"\x5J&\x2\x91\x90\x3\x2\x2\x2\x92\x95\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x93"+
		"\x94\x3\x2\x2\x2\x94\x97\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x96\x8F\x3\x2"+
		"\x2\x2\x96\x93\x3\x2\x2\x2\x97\x11\x3\x2\x2\x2\x98\xA0\x5R*\x2\x99\x9B"+
		"\x5J&\x2\x9A\x99\x3\x2\x2\x2\x9B\x9E\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9C"+
		"\x9D\x3\x2\x2\x2\x9D\xA0\x3\x2\x2\x2\x9E\x9C\x3\x2\x2\x2\x9F\x98\x3\x2"+
		"\x2\x2\x9F\x9C\x3\x2\x2\x2\xA0\x13\x3\x2\x2\x2\xA1\xA7\x5R*\x2\xA2\xA3"+
		"\x5\x16\f\x2\xA3\xA4\a:\x2\x2\xA4\xA5\x5\x1E\x10\x2\xA5\xA7\x3\x2\x2\x2"+
		"\xA6\xA1\x3\x2\x2\x2\xA6\xA2\x3\x2\x2\x2\xA7\x15\x3\x2\x2\x2\xA8\xA9\x5"+
		"\x18\r\x2\xA9\xAA\a\x13\x2\x2\xAA\xAB\x5\x1A\xE\x2\xAB\xAC\a\x13\x2\x2"+
		"\xAC\xAD\x5\x1C\xF\x2\xAD\x17\x3\x2\x2\x2\xAE\xAF\x5P)\x2\xAF\xB0\x5P"+
		")\x2\xB0\xB1\x5P)\x2\xB1\xB2\x5P)\x2\xB2\x19\x3\x2\x2\x2\xB3\xB4\x5P)"+
		"\x2\xB4\xB5\x5P)\x2\xB5\x1B\x3\x2\x2\x2\xB6\xB7\x5P)\x2\xB7\xB8\x5P)\x2"+
		"\xB8\x1D\x3\x2\x2\x2\xB9\xBA\x5 \x11\x2\xBA\xBB\x5*\x16\x2\xBB\x1F\x3"+
		"\x2\x2\x2\xBC\xBD\x5\"\x12\x2\xBD\xBE\a \x2\x2\xBE\xBF\x5$\x13\x2\xBF"+
		"\xC0\a \x2\x2\xC0\xC2\x5&\x14\x2\xC1\xC3\x5(\x15\x2\xC2\xC1\x3\x2\x2\x2"+
		"\xC2\xC3\x3\x2\x2\x2\xC3!\x3\x2\x2\x2\xC4\xC5\x5P)\x2\xC5\xC6\x5P)\x2"+
		"\xC6#\x3\x2\x2\x2\xC7\xC8\x5P)\x2\xC8\xC9\x5P)\x2\xC9%\x3\x2\x2\x2\xCA"+
		"\xCB\x5P)\x2\xCB\xCC\x5P)\x2\xCC\'\x3\x2\x2\x2\xCD\xCE\a\x14\x2\x2\xCE"+
		"\xE4\x5P)\x2\xCF\xD1\x5P)\x2\xD0\xCF\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1"+
		"\xE5\x3\x2\x2\x2\xD2\xD3\x5P)\x2\xD3\xD4\x5P)\x2\xD4\xE5\x3\x2\x2\x2\xD5"+
		"\xD6\x5P)\x2\xD6\xD7\x5P)\x2\xD7\xD8\x5P)\x2\xD8\xE5\x3\x2\x2\x2\xD9\xDA"+
		"\x5P)\x2\xDA\xDB\x5P)\x2\xDB\xDC\x5P)\x2\xDC\xDD\x5P)\x2\xDD\xE5\x3\x2"+
		"\x2\x2\xDE\xDF\x5P)\x2\xDF\xE0\x5P)\x2\xE0\xE1\x5P)\x2\xE1\xE2\x5P)\x2"+
		"\xE2\xE3\x5P)\x2\xE3\xE5\x3\x2\x2\x2\xE4\xD0\x3\x2\x2\x2\xE4\xD2\x3\x2"+
		"\x2\x2\xE4\xD5\x3\x2\x2\x2\xE4\xD9\x3\x2\x2\x2\xE4\xDE\x3\x2\x2\x2\xE5"+
		")\x3\x2\x2\x2\xE6\xE9\a@\x2\x2\xE7\xE9\x5,\x17\x2\xE8\xE6\x3\x2\x2\x2"+
		"\xE8\xE7\x3\x2\x2\x2\xE9+\x3\x2\x2\x2\xEA\xEB\t\x2\x2\x2\xEB\xEC\x5\""+
		"\x12\x2\xEC\xED\a \x2\x2\xED\xEE\x5$\x13\x2\xEE-\x3\x2\x2\x2\xEF\xFA\x5"+
		"R*\x2\xF0\xF1\a\x41\x2\x2\xF1\xF2\x5\x30\x19\x2\xF2\xF3\a\x43\x2\x2\xF3"+
		"\xF4\x5H%\x2\xF4\xF6\x3\x2\x2\x2\xF5\xF0\x3\x2\x2\x2\xF6\xF7\x3\x2\x2"+
		"\x2\xF7\xF5\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xFA\x3\x2\x2\x2\xF9\xEF"+
		"\x3\x2\x2\x2\xF9\xF5\x3\x2\x2\x2\xFA/\x3\x2\x2\x2\xFB\x101\x5\x34\x1B"+
		"\x2\xFC\xFD\x5H%\x2\xFD\xFE\x5\x32\x1A\x2\xFE\x100\x3\x2\x2\x2\xFF\xFC"+
		"\x3\x2\x2\x2\x100\x103\x3\x2\x2\x2\x101\xFF\x3\x2\x2\x2\x101\x102\x3\x2"+
		"\x2\x2\x102\x31\x3\x2\x2\x2\x103\x101\x3\x2\x2\x2\x104\x105\x5\x36\x1C"+
		"\x2\x105\x106\a#\x2\x2\x106\x107\a\b\x2\x2\x107\x108\x5\x38\x1D\x2\x108"+
		"\x109\a\b\x2\x2\x109\x33\x3\x2\x2\x2\x10A\x10B\x5:\x1E\x2\x10B\x35\x3"+
		"\x2\x2\x2\x10C\x10D\x5:\x1E\x2\x10D\x37\x3\x2\x2\x2\x10E\x112\n\x3\x2"+
		"\x2\x10F\x110\a\x42\x2\x2\x110\x112\t\x3\x2\x2\x111\x10E\x3\x2\x2\x2\x111"+
		"\x10F\x3\x2\x2\x2\x112\x115\x3\x2\x2\x2\x113\x111\x3\x2\x2\x2\x113\x114"+
		"\x3\x2\x2\x2\x114\x39\x3\x2\x2\x2\x115\x113\x3\x2\x2\x2\x116\x118\x5L"+
		"\'\x2\x117\x116\x3\x2\x2\x2\x118\x11B\x3\x2\x2\x2\x119\x117\x3\x2\x2\x2"+
		"\x119\x11A\x3\x2\x2\x2\x11A;\x3\x2\x2\x2\x11B\x119\x3\x2\x2\x2\x11C\x11F"+
		"\x5> \x2\x11D\x11F\x5@!\x2\x11E\x11C\x3\x2\x2\x2\x11E\x11D\x3\x2\x2\x2"+
		"\x11F=\x3\x2\x2\x2\x120\x122\x5\x46$\x2\x121\x120\x3\x2\x2\x2\x122\x125"+
		"\x3\x2\x2\x2\x123\x121\x3\x2\x2\x2\x123\x124\x3\x2\x2\x2\x124?\x3\x2\x2"+
		"\x2\x125\x123\x3\x2\x2\x2\x126\x127\x5\x42\"\x2\x127\x128\x5\x44#\x2\x128"+
		"\x41\x3\x2\x2\x2\x129\x12A\t\x4\x2\x2\x12A\x43\x3\x2\x2\x2\x12B\x12D\x5"+
		"\x46$\x2\x12C\x12B\x3\x2\x2\x2\x12D\x130\x3\x2\x2\x2\x12E\x12C\x3\x2\x2"+
		"\x2\x12E\x12F\x3\x2\x2\x2\x12F\x45\x3\x2\x2\x2\x130\x12E\x3\x2\x2\x2\x131"+
		"\x132\t\x5\x2\x2\x132G\x3\x2\x2\x2\x133\x134\a\x6\x2\x2\x134I\x3\x2\x2"+
		"\x2\x135\x136\t\x6\x2\x2\x136K\x3\x2\x2\x2\x137\x138\t\a\x2\x2\x138M\x3"+
		"\x2\x2\x2\x139\x13A\t\b\x2\x2\x13AO\x3\x2\x2\x2\x13B\x13E\a\x16\x2\x2"+
		"\x13C\x13E\x5N(\x2\x13D\x13B\x3\x2\x2\x2\x13D\x13C\x3\x2\x2\x2\x13EQ\x3"+
		"\x2\x2\x2\x13F\x140\a\x13\x2\x2\x140S\x3\x2\x2\x2\x1EXmrv{\x81\x84\x8A"+
		"\x8D\x93\x96\x9C\x9F\xA6\xC2\xD0\xE4\xE8\xF7\xF9\x101\x111\x113\x119\x11E"+
		"\x123\x12E\x13D";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SyslogServer.grammars
